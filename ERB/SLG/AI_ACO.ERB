;2016/05/13
;試作リグル式戦術AI
;AI Ant Colony Optimization
;-------------------------------------------------
;蟻コロニー最適化、蟻の生産と移動
;-------------------------------------------------
@AI_ACO_ANT(ARG:0)
#DIMS TYPE
#DIM ANT_NEST
#DIM TONARI_ID, 10
#DIM TONARI_KEIZAI, 10
#DIM TEMP_ID
#DIM KEIZAI_TOTAL
#DIM TEMP_KEIZAI
;リセット
VARSET TEMP_ANT
FOR LOCAL, 0, MAX_CITY
	ANT:(ARG:0):LOCAL = 0
NEXT

;編成兵力による蟻の生産と移動
FOR LOCAL, 0, MAX_UNIT
	IF UNIT_SOLDIER:(ARG:0):(LOCAL:0) > 0
		ANT_NEST = UNIT_POSITION:(ARG:0):(LOCAL:0)
		SIF ANT_NEST < 1
			CONTINUE
		VARSET TONARI_ID
		VARSET TONARI_KEIZAI
		TEMP_ANT:ANT_NEST = SQRT(UNIT_SOLDIER:(ARG:0):(LOCAL:0))
		
		FOR LOCAL:1, 0, 10
			SIF CITY_ROOT:ANT_NEST:(LOCAL:1) <= 0
				CONTINUE
			TONARI_ID:(LOCAL:1) = CITY_ROOT:ANT_NEST:(LOCAL:1)
			;隣接都市の経済規模の取得、中継地点は中継先を参照
			;AIの性質上、遠征しにくいので多めにとる
			IF CITY_TYPE:(TONARI_ID:(LOCAL:1)) == 1
				TEMP_ID = 0
				FOR LOCAL:2, 0, 10
					SIF CITY_ROOT:(TONARI_ID:(LOCAL:1)):(LOCAL:2) <= 0
						CONTINUE
					SIF CITY_ROOT:(TONARI_ID:(LOCAL:1)):(LOCAL:2) == ANT_NEST
						CONTINUE
					TEMP_ID = LOCAL:2
					BREAK
				NEXT
				
				;所属判定
				;空白地に移動しやすいように
				;両方自分の都市
				IF CITY_OWNER:TEMP_ID == ARG:0 && CITY_OWNER:ANT_NEST == ARG:0
					TEMP_KEIZAI = (CITY_ECONOMY_LIMIT:ANT_NEST + CITY_ECONOMY:ANT_NEST) / 2
					TEMP_KEIZAI += (CITY_ECONOMY_LIMIT:TEMP_ID + CITY_ECONOMY:TEMP_ID) / 2
					TONARI_KEIZAI:(LOCAL:1) = SQRT(TEMP_KEIZAI + 1) / 2 
				;移動先が他勢力
				ELSEIF CITY_OWNER:ANT_NEST == ARG:0
					TEMP_KEIZAI = (CITY_ECONOMY_LIMIT:TEMP_ID + CITY_ECONOMY:TEMP_ID) / 2
					TONARI_KEIZAI:(LOCAL:1) = SQRT(TEMP_KEIZAI + 1) * 2
					SIF CITY_OWNER:TEMP_ID == 0
						TONARI_KEIZAI:(LOCAL:1) *= 3
				;移動元が他勢力
				ELSEIF CITY_OWNER:TEMP_ID == ARG:0
					TEMP_KEIZAI = (CITY_ECONOMY_LIMIT:ANT_NEST + CITY_ECONOMY:ANT_NEST) / 2
					TONARI_KEIZAI:(LOCAL:1) = SQRT(TEMP_KEIZAI + 1)
					SIF CITY_OWNER:ANT_NEST == 0
						TONARI_KEIZAI:(LOCAL:1) = TONARI_KEIZAI:(LOCAL:1) / 2 + 1
				;両方他勢力の都市
				ELSE
					TEMP_KEIZAI = (CITY_ECONOMY_LIMIT:TEMP_ID + CITY_ECONOMY:TEMP_ID) / 2
					TONARI_KEIZAI:(LOCAL:1) = SQRT(TEMP_KEIZAI + 1)
					TONARI_KEIZAI:(LOCAL:1) = TONARI_KEIZAI:(LOCAL:1) * 3 / 2
				ENDIF
			ELSE
				TEMP_ID = TONARI_ID:(LOCAL:1)
				TEMP_KEIZAI = (CITY_ECONOMY_LIMIT:TEMP_ID + CITY_ECONOMY:TEMP_ID) / 2
				TONARI_KEIZAI:(LOCAL:1) = SQRT(TEMP_KEIZAI + 1)
			ENDIF
		NEXT
		
		[IF_DEBUG]
			PRINTFORML 重要性
			PRINTFORML {ANT_NEST, 3}%CITY_NAME_SHORT:(ANT_NEST), 8%：{SQRT(CITY_ECONOMY:ANT_NEST)}
			FOR LOCAL:1, 0, 10
				SIF TONARI_ID:(LOCAL:1) == 0
					BREAK
				PRINTFORML {TONARI_ID:(LOCAL:1), 3}%CITY_NAME_SHORT:(TONARI_ID:(LOCAL:1)), 8%：{TONARI_KEIZAI:(LOCAL:1)}
			NEXT
		[ENDIF]
		;蟻の移動処理
		KEIZAI_TOTAL = SUMARRAY(TONARI_KEIZAI) + SQRT(CITY_ECONOMY:ANT_NEST + 1)
		ANT:(ARG:0):ANT_NEST += (TEMP_ANT:ANT_NEST * SQRT(CITY_ECONOMY:ANT_NEST + 1)) / KEIZAI_TOTAL
		FOR LOCAL:1, 0, 10
			ANT:(ARG:0):(TONARI_ID:(LOCAL:1)) += TEMP_ANT:ANT_NEST * TONARI_KEIZAI:(LOCAL:1) / KEIZAI_TOTAL
		NEXT
	ENDIF
NEXT

;防衛部隊による蟻の生産（移動の影響を受けない）
;編成部隊＞＞防衛部隊になることが多いため水増ししておく
FOR LOCAL, 0, MAX_CITY
	SIF CITY_OWNER:(LOCAL:0) == ARG:0 && CITY_SOLDIER:(LOCAL:0) > 0
		ANT:(ARG:0):(LOCAL:0) += SQRT(CITY_SOLDIER:(LOCAL:0)) * 3
NEXT



;-------------------------------------------------
;蟻コロニー最適化、フェロモンの生産と分散
;-------------------------------------------------
@AI_ACO_PHEROMONE(ARG:0)
#DIM TONARI_ID, 10
#DIM TONARI_COUNT

VARSET TEMP_PHEROMONE
;フェロモン更新
FOR LOCAL, 0, MAX_CITY
	TEMP_PHEROMONE:(LOCAL:0) = PHEROMONE:(ARG:0):(LOCAL:0) * 4 / 5
	PHEROMONE:(ARG:0):(LOCAL:0) = 0
	TEMP_PHEROMONE:(LOCAL:0) += ANT:(ARG:0):(LOCAL:0)
NEXT

;フェロモンの分散処理
FOR LOCAL, 0, MAX_CITY
	SIF TEMP_PHEROMONE:(LOCAL:0) <= 0
		CONTINUE
	VARSET TONARI_ID
	VARSET TONARI_COUNT
	FOR LOCAL:1, 0, 10
		TONARI_ID:(LOCAL:1) = CITY_ROOT:LOCAL:(LOCAL:1)
		SIF TONARI_ID:(LOCAL:1) > 0
			TONARI_COUNT ++
	NEXT
	PHEROMONE:(ARG:0):(LOCAL:0) += TEMP_PHEROMONE:(LOCAL:0) / (TONARI_COUNT + 1)
	FOR LOCAL:1, 0, 10
		SIF TONARI_ID:(LOCAL:1) <= 0
			CONTINUE
		PHEROMONE:(ARG:0):(TONARI_ID:(LOCAL:1)) += TEMP_PHEROMONE:(LOCAL:0) / (TONARI_COUNT + 1)
	NEXT
NEXT

;分散しない警戒フェロモンの分泌
FOR LOCAL, 0, MAX_CITY
	IF TMP_IS_STAY_ENEMY_UNIT(LOCAL:0)
		LOCAL:1 = (CITY_ECONOMY_LIMIT:(LOCAL:0) + CITY_ECONOMY:(LOCAL:0)) / 2 + 1
		PHEROMONE:(ARG:0):(LOCAL:0) += SQRT(LOCAL)
	ENDIF
NEXT



;-------------------------------------------------
;蟻コロニー最適化、部隊の移動目標設定
;-------------------------------------------------
@AI_ACO_SETTARGET(ARG:0)
#DIM KOUHO_ID, 11            ;移動先候補、0はその場待機で他は隣接都市
#DIM KOUHO_RATE, 11          ;抽選確率
#DIM HIT                     ;抽選用の変数
#DIM CHECK_A                 ;比較処理用
#DIM CHECK_B                 ;比較処理用
FOR LOCAL:0, 0, 10
	SIF UNIT_SOLDIER:(ARG:0):(LOCAL:0) <= 0
		CONTINUE
	
	VARSET KOUHO_ID
	VARSET KOUHO_RATE
	UNIT_TARGET:(ARG:0):(LOCAL:0) = 0
	
	;現在地0の部隊は新規作成部隊とみなして現在地を設定する
	;不具合出るかも
	SIF UNIT_POSITION:(ARG:0):(LOCAL:0) == 0
		CALL SET_NEW_UNIT_POSITION(ARG:0, LOCAL:0)
		
	KOUHO_ID:0 = UNIT_POSITION:(ARG:0):(LOCAL:0)
	
	FOR LOCAL:1, 0, 10
		KOUHO_ID:(LOCAL:1 + 1) = CITY_ROOT:(KOUHO_ID:0):(LOCAL:1)
	NEXT
	
	FOR LOCAL:1, 0, 11
		SIF KOUHO_ID:(LOCAL:1) < 1
			CONTINUE
		;敵対勢力は侵略対象として可能、2～5は平和裏に滞在可能、1のみが不可となる
		;	敵対=0 停戦=1 連合=2 期限付き同盟=3 永久同盟=4 自国=5
		SIF CHECK_COUNTRY_RELATION_F(CITY_OWNER:(KOUHO_ID:(LOCAL:1)), ARG:0) == 1
			CONTINUE
		
		;基本値はフェロモン
		KOUHO_RATE:(LOCAL:1) = PHEROMONE:(ARG:0):(KOUHO_ID:(LOCAL:1))
		
		;空白地は優先
		SIF CITY_OWNER:(KOUHO_ID:(LOCAL:1)) == 0
			TIMES KOUHO_RATE:(LOCAL:1), 5.0
		
		;防衛政策の影響
		IF GROUPMATCH(COUNTRY_POLICY:(ARG:0), 2, 5, 8)
			SELECTCASE COUNTRY_POLICY:(ARG:0)
			;とりあえず内に留まる
			;もともと自勢力の領土は蟻がたまりやすいので控えめに
			CASE 2
				SIF CITY_OWNER:(KOUHO_ID:(LOCAL:1)) == ARG:0
					TIMES KOUHO_RATE:(LOCAL:1), 1.1
			CASE 5
				SIF CITY_OWNER:(KOUHO_ID:(LOCAL:1)) == ARG:0
					TIMES KOUHO_RATE:(LOCAL:1), 1.3
			CASE 8
				SIF CITY_OWNER:(KOUHO_ID:(LOCAL:1)) == ARG:0
					TIMES KOUHO_RATE:(LOCAL:1), 1.5
			ENDSELECT
		ELSE
			;難易度オプションの影響
			;普通なら経済規模を考慮に入れる
			;中継地は除外
			IF CONFIG:300 >= 1
				IF CITY_TYPE:(KOUHO_ID:(LOCAL:1)) == 1
				ELSEIF CHECK_COUNTRY_RELATION_F(CITY_OWNER:(KOUHO_ID:(LOCAL:1)), ARG:0) == 0 || CITY_OWNER:(KOUHO_ID:(LOCAL:1)) == 0
					CHECK_A = (CITY_ECONOMY_LIMIT:(KOUHO_ID:(LOCAL:1)) + CITY_ECONOMY:(KOUHO_ID:(LOCAL:1))) / 2 + 1
					CHECK_B = (CITY_ECONOMY_LIMIT:(KOUHO_ID:0) + CITY_ECONOMY:(KOUHO_ID:0)) / 2 + 1
					SELECTCASE CHECK_A * 100 / CHECK_B
					CASE IS < 50
						TIMES KOUHO_RATE:(LOCAL:1), 0.7
					CASE IS < 75
						TIMES KOUHO_RATE:(LOCAL:1), 0.8
					CASE IS < 100
						TIMES KOUHO_RATE:(LOCAL:1), 0.9
					CASE IS < 200
						TIMES KOUHO_RATE:(LOCAL:1), 1.1
					CASE IS < 300
						TIMES KOUHO_RATE:(LOCAL:1), 1.4
					CASE IS < 400
						TIMES KOUHO_RATE:(LOCAL:1), 1.7
					CASEELSE
						TIMES KOUHO_RATE:(LOCAL:1), 2.0
					ENDSELECT
				ENDIF
			ENDIF
			
			;困難以上なら狡猾に
			IF CONFIG:300 >= 2
				;小国は食う
				IF CHECK_COUNTRY_RELATION_F(CITY_OWNER:(KOUHO_ID:(LOCAL:1)), ARG:0) == 0 && CITY_OWNER:(KOUHO_ID:(LOCAL:1)) >= 1
					CHECK_A = GET_OWN_CITY(CITY_OWNER:(KOUHO_ID:(LOCAL:1))) + 1
					CHECK_B = GET_OWN_CITY(ARG:0) + 1
					SELECTCASE CHECK_A * 100 / CHECK_B
					CASE IS > 100
					CASE IS > 50
						TIMES KOUHO_RATE:(LOCAL:1), 1.3
					CASE IS > 33
						TIMES KOUHO_RATE:(LOCAL:1), 1.5
					CASE IS > 25
						TIMES KOUHO_RATE:(LOCAL:1), 1.7
					CASE IS > 20
						TIMES KOUHO_RATE:(LOCAL:1), 1.9
					CASEELSE
						TIMES KOUHO_RATE:(LOCAL:1), 2.1
					ENDSELECT
				ENDIF
				
				;移動先が手薄なら狙おうとする
				;対象が中継地であるときは除外する
				IF CITY_TYPE:(KOUHO_ID:(LOCAL:1)) == 1
				ELSEIF CHECK_COUNTRY_RELATION_F(CITY_OWNER:(KOUHO_ID:(LOCAL:1)), ARG:0) == 0 || CITY_OWNER:(KOUHO_ID:(LOCAL:1)) == 0
					CHECK_A = GET_CITY_GUARD(KOUHO_ID:(LOCAL:1)) + 1
					CHECK_B = GET_CITY_GUARD(KOUHO_ID:0) + 1
					SELECTCASE CHECK_A * 100 / CHECK_B
					CASE IS > 200
						TIMES KOUHO_RATE:(LOCAL:1), 0.5
					CASE IS > 100
						TIMES KOUHO_RATE:(LOCAL:1), 0.7
					CASE IS > 50
						TIMES KOUHO_RATE:(LOCAL:1), 1.1
					CASE IS > 33
						TIMES KOUHO_RATE:(LOCAL:1), 3.0
					CASE IS > 25
						TIMES KOUHO_RATE:(LOCAL:1), 4.0
					CASE IS > 20
						TIMES KOUHO_RATE:(LOCAL:1), 5.0
					CASEELSE
						TIMES KOUHO_RATE:(LOCAL:1), 6.0
					ENDSELECT
				ENDIF
			ENDIF
			
			;イジメ
			SIF CONFIG:300 == 3 && CFLAG:MASTER:1 >= 1 && CITY_OWNER:(KOUHO_ID:(LOCAL:1)) == CFLAG:MASTER:1
				TIMES KOUHO_RATE:(LOCAL:1), 3.0
		ENDIF
	NEXT
	
	[IF_DEBUG]
		PRINTFORML 移動率
		FOR LOCAL:1, 0, 11
			SIF KOUHO_ID:(LOCAL:1) == 0
				BREAK
			PRINTFORML {KOUHO_ID:(LOCAL:1), 3}%CITY_NAME_SHORT:(KOUHO_ID:(LOCAL:1)), 8%：{KOUHO_RATE:(LOCAL:1)}
		NEXT
	[ENDIF]
	
	HIT = SUMARRAY(KOUHO_RATE)
	
	;たぶん無いがエラー落ちが怖いので
	IF !HIT
		UNIT_TARGET:(ARG:0):(LOCAL:0) = KOUHO_ID:0
	ELSE
		FOR LOCAL:1, 0, 11
			IF RAND:HIT < KOUHO_RATE:(LOCAL:1)
				UNIT_TARGET:(ARG:0):(LOCAL:0) = KOUHO_ID:(LOCAL:1)
				BREAK
			ELSE
				HIT -= KOUHO_RATE:(LOCAL:1)
			ENDIF
		NEXT
	ENDIF
	
	;中継地点が目標となってしまった場合の再抽選処理
	;手抜き
	;だいぶうろうろしそうである
	IF CITY_TYPE:(UNIT_TARGET:(ARG:0):(LOCAL:0)) == 1
		VARSET KOUHO_ID
		VARSET KOUHO_RATE
		
		FOR LOCAL:1, 0, 10
			KOUHO_ID:(LOCAL:1) = CITY_ROOT:(UNIT_TARGET:(ARG:0):(LOCAL:0)):(LOCAL:1)
			KOUHO_RATE:(LOCAL:1) = PHEROMONE:(ARG:0):(KOUHO_ID:(LOCAL:1))
		NEXT
		
		HIT = SUMARRAY(KOUHO_RATE)
		FOR LOCAL:1, 0, 10
			IF RAND:HIT < KOUHO_RATE:(LOCAL:1)
				UNIT_TARGET:(ARG:0):(LOCAL:0) = KOUHO_ID:(LOCAL:1)
				BREAK
			ELSE
				HIT -= KOUHO_RATE:(LOCAL:1)
			ENDIF
		NEXT
	ENDIF
	
	;念のため
	SIF UNIT_TARGET:(ARG:0):(LOCAL:0) == 0
		UNIT_TARGET:(ARG:0):(LOCAL:0) = KOUHO_ID:0
	
NEXT

