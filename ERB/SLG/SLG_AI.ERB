;-------------------------------------------------
;ARG:0勢力のAIの行動
;-------------------------------------------------
@AI_ACTION(ARG:0)

;ランダムキャラを使用している場合
IF FLAG:44
	;士官数が足りなければ士官を募集
	CALL RECRUIT_AI(ARG:0)
ENDIF

;国家間の隣接関係マップの作成(処理の高速化)
CALL TMP_CREATE_COUNTRY_NEIBORING_MAP

;{SLG_PP:0}期までは外交を行わない
IF DAY < SLG_PP:0
ELSE
	;外交の処理
	CALL AI_DIPLOMACY_ACT(ARG:0)
	;国家関係に変化があった場合
	IF RESULT
		;国家関係マップの再作成(処理の高速化)
		CALL TMP_CREATE_RELATION_MAP
	ENDIF
ENDIF

IF GET_OWN_CITY(ARG:0) > 0
	;部隊マップの作成(処理の高速化)
	CALL TMP_CREATE_UNIT_MAP
	;防衛を全て解除
	FOR LOCAL:0, 0, MAX_CITY
		IF CITY_OWNER:(LOCAL:0) == ARG:0
			;敵部隊のいる都市は解除不可
			IF !TMP_IS_STAY_ENEMY_UNIT(LOCAL:0)
				COUNTRY_SOLDIER:(ARG:0) += CITY_SOLDIER:(LOCAL:0)
				CITY_SOLDIER:(LOCAL:0) = 0
				CITY_COMMANDER:(LOCAL:0) = 0
			ENDIF
		ENDIF
	NEXT
	FOR LOCAL:0, 0, 10
		;(LOCAL:0)番の部隊の存在判定　※最終決戦パッチ、FLAG:101の（勢力番号）ビットが1であればスキップ
		;最終決戦以外にも「野盗が中継点を占拠（つまりそこを通る旅人が陵辱される可能性もあるわけだ）」
		;「主人公勢力以外に複数勢力がある状態で特定勢力だけ決戦モード」に使えそうなので改造しました。
		IF UNIT_SOLDIER:(ARG:0):(LOCAL:0) > 0 && !GETBIT(FLAG:101, ARG:0)
			;部隊の所在地が敵対勢力でなければ解散する
			IF UNIT_POSITION:(ARG:0):(LOCAL:0) >= 0 && TMP_COUNTRY_RELATION:(ARG:0):(CITY_OWNER:(UNIT_POSITION:(ARG:0):(LOCAL:0))) >= 1
				CALL CLEAR_UNIT(ARG:0, LOCAL:0)
			;部隊の現在位置が地点かつ移動先を失っていれば解散する（強制解散フラグを使って時間を必要にするのも多分あり）
			ELSEIF !UNIT_TARGET:(ARG:0):(LOCAL:0) && CITY_TYPE:(UNIT_POSITION:(ARG:0):(LOCAL:0)) == 1
				CALL CLEAR_UNIT(ARG:0, LOCAL:0)
			ENDIF
		ENDIF
	NEXT
	;DEBUGPRINTFORML %ANAME(GET_COUNTRY_BOSS(ARG:0))%
	;DEBUGPRINTFORML COUNTRY_SOLDIER:{COUNTRY_SOLDIER:(ARG:0)}
	;DEBUGPRINTFORML 最大:{GET_SUM_ECONOMY(ARG:0) / 10}

	CALL SLG_AI_SETDOCTRINE(ARG:0)
	CALL SLG_AI_RESCUE(ARG:0)

	SIF DAY >= SLG_PP:1
		CALL AI_DEPLOY_ARMY(ARG:0, 0)
	REPEAT 10
		CALL SLG_AI_INVASION_SETTARGET(ARG:0)
		SIF RESULT == 0
			BREAK
		CALL SLG_AI_INVASION_CREATEUNIT(ARG:0)
		SIF RESULT == 0
			BREAK
	REND

	SIF DAY >= SLG_PP:1
		CALL AI_DEPLOY_ARMY(ARG:0, 1)
	CALL SLG_AI_DEFENSE(ARG:0)
ENDIF
;-------------------------------------------------
;●国家政策の決定
;政策メモ
;AIは専用の国策を取得できるようになる
;-------------------------------------------------
@SLG_AI_SETDOCTRINE(ARG:0)
;自国の経済力／限界値／発展率
#DIM ECONOMY
#DIM ECONOMY_LIMIT
#DIM ECONOMY_PERCENTAGE
;自国の兵数／非侵攻兵数／徴兵限界／雇用率／部隊に所属する兵を除く雇用率
#DIM MILITARY
#DIM MILITARY_FREE
#DIM MILITARY_LIMIT
#DIM MILITARY_PERCENTAGE
#DIM MILITARY_FREE_PERCENTAGE
;隣接する敵対勢力の最大経済力
;敵対ではない勢力の方でもチェック
#DIM ENEMY_ECONOMY
#DIM BORDER_ECONOMY

;こちらの現在の経済規模雄に対する相手の経済比（%計算）
#DIM ENEMY_ECONOMY_RATE
#DIM BORDER_ECONOMY_RATE

VARSET LOCAL
;経済及び軍事力の基礎情報を取得
ECONOMY = GET_SUM_ECONOMY(ARG:0)
ECONOMY_LIMIT = 0
WHILE 1
	LOCAL:0 = FINDELEMENT(CITY_OWNER, ARG:0, LOCAL:0)
	SIF LOCAL:0 == -1
		BREAK
	ECONOMY_LIMIT += CITY_ECONOMY_LIMIT:(LOCAL:0)
	LOCAL:0 ++
WEND
ECONOMY_PERCENTAGE = ECONOMY * 100 / MAX(ECONOMY_LIMIT, 1)

MILITARY = GET_SUM_SOLDIER(ARG:0)
MILITARY_LIMIT = ECONOMY * 100 / 1000
MILITARY_PERCENTAGE = MILITARY * 100 / MAX(MILITARY_LIMIT, 1)
FOR LOCAL:0, 0, 10
	LOCAL:1 += MAX(0, UNIT_SOLDIER:(ARG:0):(LOCAL:0))
NEXT
MILITARY_FREE = MILITARY - LOCAL:1
MILITARY_FREE_PERCENTAGE = MILITARY_FREE * 100 / MAX((MILITARY_LIMIT -LOCAL:1), 1)

ENEMY_ECONOMY = 0
BORDER_ECONOMY = 0
;DEBUGPRINTFORML {ARG:0}:CITY ECONOMY LIMIT = {自国経済限界}
;敵対勢力と隣接しているかどうかを判定
;経済比は別変数で管理するので略
FOR LOCAL:0, 1, MAX_COUNTRY
	IF IS_COUNTRY(LOCAL:0) && LOCAL:0 != ARG:0
		IF TMP_COUNTRY_IS_NEIBORING:(ARG:0):(LOCAL:0)
			SIF TMP_COUNTRY_RELATION:(ARG:0):(LOCAL:0) == 0
				ENEMY_ECONOMY = MAX(ENEMY_ECONOMY, GET_SUM_ECONOMY(LOCAL:0))
			BORDER_ECONOMY = MAX(BORDER_ECONOMY, GET_SUM_ECONOMY(LOCAL:0))
		ENDIF
	ENDIF
NEXT
ENEMY_ECONOMY_RATE = ENEMY_ECONOMY * 100 / MAX(ECONOMY, 1)
BORDER_ECONOMY_RATE = BORDER_ECONOMY * 100 / MAX(ECONOMY, 1)

;AIタイプ別に国策決定ルーチンの設定
;隣接状況は条件の一つに変換
;現状は分岐閾値と選択する方針でほぼ決まっているのでなにか考えたい
SELECTCASE COUNTRY_AI_TYPE:(ARG:0)
;通常タイプ(012345)
;経済と兵力の内割合的に不足している方を優先し、平均的に伸ばす
;隣接している場合は防衛兵力の割合と所有都市数などで判断する
CASE AI_通常
	SELECTCASE ENEMY_ECONOMY_RATE
	;敵対勢力と接していない
	CASE 0
		;経済と兵数の限界に対する保有率を確認（低ければランク２を選択し拡張を急ぐ、閾値は難易度により変化）
		SELECTCASE MIN(ECONOMY_PERCENTAGE, MILITARY_FREE_PERCENTAGE) - 10 + RAND:21
		;40+5*難易度未満、経済＞軍事なら軍事、逆なら経済に主眼
		CASE IS < (40 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 3
		;60+5*難易度未満、経済＞軍事なら軍事、逆なら経済に主眼
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 3
		;それ以上、経済＞軍事なら軍事、逆なら経済に主眼（攻められないから防御ペナルティは気にならない）
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 3
		ENDSELECT
	;敵対勢力と接触
	CASE 1 TO 50
		SELECTCASE MIN(ECONOMY_PERCENTAGE, MILITARY_FREE_PERCENTAGE) - 5 + RAND:11
		CASE IS < (50 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 3
		CASE IS < (65 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 0
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 2
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 40 && GET_OWN_CITY(ARG:0) <= 4
			COUNTRY_POLICY:(ARG:0) = 5
	;敵国と接触
	;ここから兵数のみで警戒度を決める
	CASE 51 TO 100
		SELECTCASE MILITARY_FREE_PERCENTAGE - 10 + RAND:21
		CASE IS < (55 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 3
		CASE IS < (70 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 2
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 2 # 5
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 60 && GET_OWN_CITY(ARG:0) <= 3
			COUNTRY_POLICY:(ARG:0) = 5
	;同規模の敵国と接触
	CASE 101 TO 200
		SELECTCASE MILITARY_FREE_PERCENTAGE - 5 + RAND:11
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 2
		CASE IS < (75 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = 2
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = 5
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 75 && GET_OWN_CITY(ARG:0) <= 2
			COUNTRY_POLICY:(ARG:0) = 5
	;敵大国と接触
	CASE IS > 200
		SELECTCASE MILITARY_FREE_PERCENTAGE - 5 + RAND:11
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0)  = 4
		CASE IS < (80 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = GET_OWN_CITY(ARG:0) <= 2 ? 1 # 5
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = 5
		ENDSELECT
	CASEELSE
		COUNTRY_POLICY:(ARG:0) = RANDOM_ARRAY(0, 1, 2, 3, 4, 5)
	ENDSELECT
;好戦タイプ(02457)
;徴兵メイン時々経済のことも考える、でも強くは出ない
CASE AI_好戦
	SELECTCASE ENEMY_ECONOMY_RATE
	;敵対勢力と接していない
	CASE 0
		;経済と兵数の限界に対する保有率を確認（徴兵はランク3で加速するが経済は1のみ、閾値は難易度により変化）
		SELECTCASE MAX(ECONOMY_PERCENTAGE, MILITARY_FREE_PERCENTAGE) - 10 + RAND:21
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 7 # 0
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 0
		ENDSELECT
	;敵対勢力と接触
	CASE 1 TO 50
		SELECTCASE MAX(ECONOMY_PERCENTAGE, MILITARY_FREE_PERCENTAGE) - 5 + RAND:11
		CASE IS < (65 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 7 # 0
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 2
		ENDSELECT
		;兵数が明確に不足しているなら必ず軍拡を行う
		SIF MILITARY_PERCENTAGE < 40 
			COUNTRY_POLICY:(ARG:0) = 7
	;敵国と接触
	;ここから経済による分岐は最終判断に任せて兵数で警戒度を決める
	CASE 51 TO 100
		SELECTCASE MILITARY_FREE_PERCENTAGE - 10 + RAND:21
		CASE IS < (55 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 7 # 0
		CASE IS < (70 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 2
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 2 # 5
		ENDSELECT
		SIF MILITARY_PERCENTAGE < 50
			COUNTRY_POLICY:(ARG:0) = GET_OWN_CITY(ARG:0) <= 3 ? 5 # 7
	;同規模の敵国と接触
	CASE 101 TO 200
		SELECTCASE MILITARY_FREE_PERCENTAGE - 5 + RAND:11
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 2
		CASE IS < (75 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = 2
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = 5
		ENDSELECT
		SIF MILITARY_PERCENTAGE < 60 && GET_OWN_CITY(ARG:0) <= 2
			COUNTRY_POLICY:(ARG:0) = 5
	;敵大国と接触
	CASE IS > 200
		SELECTCASE MILITARY_FREE_PERCENTAGE - 5 + RAND:11
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0)  = 4
		CASE IS < (80 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = GET_OWN_CITY(ARG:0) <= 2 ? 1 # 5
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = 5
		ENDSELECT
	CASEELSE
		COUNTRY_POLICY:(ARG:0) = RANDOM_ARRAY(0, 2, 4, 5, 7)
	ENDSELECT
	;ただし、状況に関係なく連合を組んでいると軍拡しか考えない
	SIF GET_UNION_TARGET(ARG:0) > 0
		COUNTRY_POLICY:(ARG:0) = 7
;防衛タイプ(01358)
;ある程度経済を回して安定したところで引きこもり
CASE AI_防衛
	SELECTCASE ENEMY_ECONOMY_RATE
	;敵対勢力と接していない
	CASE 0
		;経済と兵数の限界に対する保有率を確認（低ければランク２を選択し拡張を急ぐ、閾値は難易度により変化）
		SELECTCASE MAX(ECONOMY_PERCENTAGE, MILITARY_FREE_PERCENTAGE) - 10 + RAND:21
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 3
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 3
		ENDSELECT
	;敵対勢力と接触
	CASE 1 TO 50
		SELECTCASE MAX(ECONOMY_PERCENTAGE, MILITARY_FREE_PERCENTAGE) - 5 + RAND:11
		CASE IS < (45 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 3
		CASE IS < (65 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 0
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 5
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 40 && GET_OWN_CITY(ARG:0) <= 3
			COUNTRY_POLICY:(ARG:0) = 8
	;敵国と接触
	;ここから兵数のみで警戒度を決める
	CASE 50 TO 100
		SELECTCASE MILITARY_FREE_PERCENTAGE - 10 + RAND:21
		CASE IS < (50 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 3
		CASE IS < (70 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 5
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 5 # 8
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 60 && GET_OWN_CITY(ARG:0) <= 2
			COUNTRY_POLICY:(ARG:0) = 8
	;同規模の敵国と接触
	CASE 100 TO 200
		SELECTCASE MILITARY_FREE_PERCENTAGE - 5 + RAND:11
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 5
		CASE IS < (75 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = 5
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = 8
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 75 && GET_OWN_CITY(ARG:0) <= 2
			COUNTRY_POLICY:(ARG:0) = 8
	;敵大国と接触
	CASE IS > 200
		SELECTCASE MILITARY_FREE_PERCENTAGE - 5 + RAND:11
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = 5
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = 8
		ENDSELECT
	CASEELSE
		COUNTRY_POLICY:(ARG:0) = RANDOM_ARRAY(0, 1, 3, 5, 8)
	ENDSELECT
;外交タイプ(01235)
;他国との関係に余計な波を立たせないために軍事ランク2は封印
CASE AI_外交
	SELECTCASE LOCAL:2
	;敵対勢力と接していない
	CASE 0
		COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 3
	;敵対勢力と接触
	CASE 1
		SELECTCASE MAX(ECONOMY_PERCENTAGE, MILITARY_FREE_PERCENTAGE) - 5 + RAND:11
		CASE IS < (55 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 3
		CASE IS < (70 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 0
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 2
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 40 && GET_OWN_CITY(ARG:0) <= 2
			COUNTRY_POLICY:(ARG:0) = 5
	;敵国と接触
	;ここから兵数のみで警戒度を決める
	CASE 2
		SELECTCASE MILITARY_FREE_PERCENTAGE - 10 + RAND:21
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 3
		CASE IS < (75 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 2
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 5 # 2
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 60 && GET_OWN_CITY(ARG:0) <= 2
			COUNTRY_POLICY:(ARG:0) = 5
	;同規模の敵国と接触
	CASE 3
		SELECTCASE MILITARY_FREE_PERCENTAGE - 5 + RAND:11
		CASE IS < (65 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 2
		CASE IS < (70 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = 2
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = 5
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 75 && GET_OWN_CITY(ARG:0) <= 2
			COUNTRY_POLICY:(ARG:0) = 5
	;敵大国と接触
	CASE 4
		SELECTCASE MILITARY_FREE_PERCENTAGE - 5 + RAND:11
		CASE IS < (70 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0)  = 1
		CASE IS < (80 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = GET_OWN_CITY(ARG:0) <= 2 ? 1 # 5
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = 5
		ENDSELECT
	CASEELSE
		COUNTRY_POLICY:(ARG:0) = RANDOM_ARRAY(0, 1, 2, 3, 5)
	ENDSELECT
;内政タイプ(12346)
;経済早回しで土台を固めて安定した雇用を
CASE AI_内政
	SELECTCASE ENEMY_ECONOMY_RATE
	;敵対勢力と接していない
	CASE 0
		;経済と兵数の限界に対する保有率を確認（低ければランク２を選択し拡張を急ぐ、閾値は難易度により変化）
		SELECTCASE MAX(ECONOMY_PERCENTAGE, MILITARY_FREE_PERCENTAGE) - 10 + RAND:21
		;40+5*難易度未満、経済＞軍事なら軍事、逆なら経済に主眼
		CASE IS < (30 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 6
		;60+5*難易度未満、経済＞軍事なら軍事、逆なら経済に主眼
		CASE IS < (50 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 6
		;それ以上、経済＞軍事なら軍事、逆なら経済に主眼（攻められないから防御ペナルティは気にならない）
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 6
		ENDSELECT
	;敵対勢力と接触
	CASE 1 TO 50
		SELECTCASE MAX(ECONOMY_PERCENTAGE, MILITARY_FREE_PERCENTAGE) - 5 + RAND:11
		CASE IS < (40 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 6
		CASE IS < (55 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 3
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 2
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 40 && GET_OWN_CITY(ARG:0) <= 4
			COUNTRY_POLICY:(ARG:0) = 2
	;敵国と接触
	;ここから兵数のみで警戒度を決める
	CASE 51 TO 100
		SELECTCASE MILITARY_FREE_PERCENTAGE - 10 + RAND:21
		CASE IS < (50 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 6
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 3
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 2
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 60 && GET_OWN_CITY(ARG:0) <= 3
			COUNTRY_POLICY:(ARG:0) = 5
	;同規模の敵国と接触
	CASE 101 TO 200
		SELECTCASE MILITARY_FREE_PERCENTAGE - 5 + RAND:11
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 3
		CASE IS < (75 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 2
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = 2
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 75 && GET_OWN_CITY(ARG:0) <= 3
			COUNTRY_POLICY:(ARG:0) = 2
	;敵大国と接触
	CASE IS > 200
		SELECTCASE MILITARY_FREE_PERCENTAGE - 5 + RAND:11
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0)  = 4
		CASE IS < (80 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = GET_OWN_CITY(ARG:0) <= 2 ? 1 # 2
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = 2
		ENDSELECT
	CASEELSE
		COUNTRY_POLICY:(ARG:0) = RANDOM_ARRAY(1, 2, 3, 4, 6)
	ENDSELECT
	;ただし、状況に関係なく連合を組んでいると経済しか考えない
	SIF GET_UNION_TARGET(ARG:0) > 0
		COUNTRY_POLICY:(ARG:0) = 6

;外来タイプ(247)
;脳筋。
CASE AI_外来
	SELECTCASE ENEMY_ECONOMY_RATE
	;敵対勢力と接していない
	CASE 0
		COUNTRY_POLICY:(ARG:0) = 7
	;敵対勢力と接触
	CASE 1 TO 50
		COUNTRY_POLICY:(ARG:0) = 7
	;敵国と接触
	;ここから兵数のみで警戒度を決める
	CASE 51 TO 100
		COUNTRY_POLICY:(ARG:0) = MILITARY_FREE > 500000 ? 2 # 7
	;同規模の敵国と接触
	CASE 101 TO 200
		COUNTRY_POLICY:(ARG:0) = MILITARY > 500000 ? 2 # 7
	;敵大国と接触
	CASE IS > 200
		COUNTRY_POLICY:(ARG:0) = 2
	CASEELSE
		COUNTRY_POLICY:(ARG:0) = RANDOM_ARRAY(2, 4, 7)
	ENDSELECT

;ホフゴブリン(12458)
;若干守り気味の脳筋
CASE AI_ホフゴブリン
	SELECTCASE ENEMY_ECONOMY_RATE
	;敵対勢力と接していない
	CASE 0
		COUNTRY_POLICY:(ARG:0) = 4
	;敵対勢力と接触
	CASE 1 TO 50
		SELECTCASE MAX(ECONOMY_PERCENTAGE, MILITARY_FREE_PERCENTAGE) - 5 + RAND:11
		CASE IS < (30 + 10 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = 4
		CASE IS < (45 + 10 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 2
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 5
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 40 && GET_OWN_CITY(ARG:0) <= 4
			COUNTRY_POLICY:(ARG:0) = 8
	;敵国と接触
	;ここから兵数のみで警戒度を決める
	CASE 51 TO 100
		SELECTCASE MILITARY_FREE_PERCENTAGE - 10 + RAND:21
		CASE IS < (40 + 10 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 2
		CASE IS < (50 + 10 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 1 # 5
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 5 # 8
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 60 && GET_OWN_CITY(ARG:0) <= 3
			COUNTRY_POLICY:(ARG:0) = 8
	;同規模の敵国と接触
	CASE 101 TO 200
		SELECTCASE MILITARY_FREE_PERCENTAGE - 5 + RAND:11
		CASE IS < (55 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 5
		CASE IS < (65 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = ECONOMY_PERCENTAGE >= MILITARY_FREE_PERCENTAGE ? 4 # 8
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = 8
		ENDSELECT
		SIF MILITARY_FREE_PERCENTAGE < 75 && GET_OWN_CITY(ARG:0) <= 3
			COUNTRY_POLICY:(ARG:0) = 8
	;敵大国と接触
	CASE IS > 200
		SELECTCASE MILITARY_FREE_PERCENTAGE - 5 + RAND:11
		CASE IS < (60 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0)  = 4
		CASE IS < (80 + 5 * CONFIG:300)
			COUNTRY_POLICY:(ARG:0) = GET_OWN_CITY(ARG:0) <= 2 ? 4 # 5
		CASEELSE
			COUNTRY_POLICY:(ARG:0) = 8
		ENDSELECT
	CASEELSE
		COUNTRY_POLICY:(ARG:0) = RANDOM_ARRAY(1, 2, 4, 5, 8)
	ENDSELECT
ENDSELECT

	;DEBUGPRINTFORML COUNTRY_POLICY:{COUNTRY_POLICY:(ARG:0)}

;-------------------------------------------------
;●防衛用の遊撃部隊を作成
;自軍の都市が攻撃を受けていれば防衛部隊を組織
;複数の都市が攻撃を受けている場合、都市を失った時に増加する戦線の数を基準に防衛の優先順位を決める
;-------------------------------------------------
@SLG_AI_RESCUE(ARG:0)
;切り返し戦術の攻撃兵数
#DIM REVERSE_SOLDIER
IS_PROTECTED = 0
LOCAL:5 = 0
LOCAL:6 = -999
FOR LOCAL:0, 0, MAX_CITY
	IF CITY_OWNER:(LOCAL:0) == ARG:0 && TMP_IS_STAY_ENEMY_UNIT(LOCAL:0)
		LOCAL:(LOCAL:5 + 100) = LOCAL:0
		LOCAL:(LOCAL:5 + 200) = TMP_CHANGE_LINE_ONLOSE(LOCAL:0)
		IF LOCAL:(LOCAL:5 + 200) > LOCAL:6
			LOCAL:6 = LOCAL:(LOCAL:5 + 200)
		ENDIF
		LOCAL:5 ++
	ENDIF
NEXT

LOCAL:7 = 0
FOR LOCAL:0, 0, LOCAL:5
	IF LOCAL:(LOCAL:0 + 200) == LOCAL:6
		LOCAL:(LOCAL:7 + 300) = LOCAL:0
		LOCAL:7 ++
	ENDIF
NEXT

IF LOCAL:7 > 0
	;空いている部隊の番号のうち最も若い番号を取得
	LOCAL:10 = -1
	FOR LOCAL:0, 0, 10
		IF UNIT_SOLDIER:(ARG:0):(LOCAL:0) <= 0
			LOCAL:10 = LOCAL:0
			BREAK
		ENDIF
	NEXT

	IF LOCAL:10 >= 0
		LOCAL:8 = RAND:(LOCAL:7)
		LOCAL:9 = LOCAL:(LOCAL:8 + 100)

		UNIT_TARGET:(ARG:0):(LOCAL:10) = 0
		UNIT_POSITION:(ARG:0):(LOCAL:10) = LOCAL:9

		SELECTCASE CONFIG:300
		;簡単は全部隊の1/3を防衛に回す
		CASE 0
			UNIT_SOLDIER:(ARG:0):(LOCAL:10) = COUNTRY_SOLDIER:(ARG:0) / 3
		;簡単以外は全部隊の2/3を防衛に回す
		CASEELSE
			UNIT_SOLDIER:(ARG:0):(LOCAL:10) = COUNTRY_SOLDIER:(ARG:0) * 2 / 3
		ENDSELECT

		COUNTRY_SOLDIER:(ARG:0) -= UNIT_SOLDIER:(ARG:0):(LOCAL:10)

		;守るべき都市上にいる敵兵の総数を調べる
		LOCAL:3 = 0
		LOCAL:4 = 0
		LOCAL:5 = 0
		FOR LOCAL:0, 0, 20
			LOCAL:1 = TMP_UNIT_ONCITY_CNT:(LOCAL:9):(LOCAL:0)
			LOCAL:2 = TMP_UNIT_ONCITY_NUM:(LOCAL:9):(LOCAL:0)
			IF LOCAL:1 >= 1 && TMP_COUNTRY_RELATION:(ARG:0):(LOCAL:1) == 0
				LOCAL:3 += UNIT_SOLDIER:(LOCAL:1):(LOCAL:2)
				IF UNIT_SOLDIER:(LOCAL:1):(LOCAL:2) > LOCAL:4
					LOCAL:4 = UNIT_SOLDIER:(LOCAL:1):(LOCAL:2)
					LOCAL:5 = LOCAL:1
				ENDIF
			ENDIF
		NEXT

		LOCAL:12 = 1
		;難易度が困難以上で敵部隊が防衛部隊の1/3未満
		IF CONFIG:300 >= 2 && LOCAL:3 * 3 < UNIT_SOLDIER:(ARG:0):(LOCAL:10)
			;部隊の半数を攻撃に回す
			REVERSE_SOLDIER = UNIT_SOLDIER:(ARG:0):(LOCAL:10) / 2
			UNIT_SOLDIER:(ARG:0):(LOCAL:10) -= REVERSE_SOLDIER

			;出撃先の都市を選択
			LOCAL:2 = 0
			FOR LOCAL:0, 1, MAX_CITY
				IF CITY_OWNER:(LOCAL:0) == LOCAL:5 && IS_ROOT(LOCAL:9, LOCAL:0)
					LOCAL:(LOCAL:2 + 100) = LOCAL:0
					LOCAL:2 ++
				ENDIF
			NEXT
			IF LOCAL:2 >= 1
				LOCAL:3 = LOCAL:(RAND:(LOCAL:2) + 100)

				;既に相手国家に部隊を送り込んでいるなら切り返さない
				LOCAL:4 = 1
				FOR LOCAL:0, 0, 10
					IF UNIT_SOLDIER:(ARG:0):(LOCAL:0) > 0 && CITY_OWNER:(UNIT_POSITION:(ARG:0):(LOCAL:0)) == LOCAL:3
						LOCAL:4 = 0
						BREAK
					ENDIF
				NEXT

				IF LOCAL:4
					;空いている部隊の番号のうち最も若い番号を取得
					LOCAL:11 = -1
					FOR LOCAL:0, 0, 10
						IF UNIT_SOLDIER:(ARG:0):(LOCAL:0) <= 0
							LOCAL:11 = LOCAL:0
							BREAK
						ENDIF
					NEXT

					IF LOCAL:11 >= 0
						;切り返し部隊を作成
						UNIT_SOLDIER:(ARG:0):(LOCAL:11) = REVERSE_SOLDIER
						UNIT_TARGET:(ARG:0):(LOCAL:11) = LOCAL:3
						UNIT_POSITION:(ARG:0):(LOCAL:11) = LOCAL:9

						;士官が行動可能な状態にあるかどうかのリストを作成
						CALL TMP_CREATE_IS_FREE_MAP

						;２部隊に載せる将を決定
						CALL CREATE_COMMANDER_LIST(ARG:0, 2)

						;防衛側の将を設定
						FOR LOCAL:0, 0, 3
							IF UNIT_COMMANDER_LIST:0:(LOCAL:0) >= 0
								CALL SET_UNIT_COMMANDER(ARG:0, LOCAL:10, LOCAL:0, UNIT_COMMANDER_LIST:0:(LOCAL:0))
							ENDIF
						NEXT

						;侵攻側の将を設定
						FOR LOCAL:0, 0, 3
							IF UNIT_COMMANDER_LIST:1:(LOCAL:0) >= 0
								CALL SET_UNIT_COMMANDER(ARG:0, LOCAL:11, LOCAL:0, UNIT_COMMANDER_LIST:1:(LOCAL:0))
							ENDIF
						NEXT

						;防衛部隊を作成したことを示すフラグ
						IS_PROTECTED = 1

						LOCAL:12 = 0
					ENDIF
				ENDIF
			ENDIF
		ENDIF

		;切り返し戦術をとらなかった場合
		IF LOCAL:12
			;士官が行動可能な状態にあるかどうかのリストを作成
			CALL TMP_CREATE_IS_FREE_MAP

			;部隊が最強となるような士官の組み合わせを得る
			CALL CHECK_COMMANDER_BEST(ARG:0)
			FOR LOCAL:0, 0, 3
				SIF UNIT_COMMANDER_BEST:(LOCAL:0) >= 0
					CALL SET_UNIT_COMMANDER(ARG:0, LOCAL:10, LOCAL:0, UNIT_COMMANDER_BEST:(LOCAL:0))
			NEXT

			;防衛部隊を作成したことを示すフラグ
			IS_PROTECTED = 1
		ENDIF
	ENDIF
ENDIF




;-------------------------------------------------
;●防衛部隊の配分
;-------------------------------------------------
@SLG_AI_DEFENSE(ARG:0)
VARSET LOCAL
;敵勢力の都市と隣接する都市の探索
LOCAL:5 = 0
FOR LOCAL:0, 0, MAX_CITY
	;ARG:0勢力の都市で、敵部隊と交戦中でない
	IF CITY_OWNER:(LOCAL:0) == ARG:0 && !TMP_IS_STAY_ENEMY_UNIT(LOCAL:0)
		FOR LOCAL:1, 0, MAX_CITY
			;敵勢力の都市と隣接しているかをチェック
			IF CITY_OWNER:(LOCAL:1) != 0 && CITY_TYPE:(LOCAL:1) == 0 && IS_ROOT(LOCAL:0, LOCAL:1)
				IF TMP_COUNTRY_RELATION:(CITY_OWNER:(LOCAL:0)):(CITY_OWNER:(LOCAL:1)) == 0
					;敵勢力の都市と隣接する都市の番号をLOCAL:100～に順次記録していく
					LOCAL:(LOCAL:5 + 100) = LOCAL:0
					LOCAL:5 ++
					BREAK
				ENDIF
			ENDIF
		NEXT
	ENDIF
NEXT

;敵勢力からの距離が２の都市の探索(「敵都市に隣接する都市」に隣接)
LOCAL:6 = 0
FOR LOCAL:0, 0, MAX_CITY
	;ARG:0勢力の都市で、敵部隊と交戦中でない
	IF CITY_OWNER:(LOCAL:0) == ARG:0 && !TMP_IS_STAY_ENEMY_UNIT(LOCAL:0)
		;「敵都市に隣接する都市」として既に記録されているかをチェック
		LOCAL:9 = 1
		FOR LOCAL:1, 0, LOCAL:5
			LOCAL:2 = LOCAL:(LOCAL:1 + 100)
			IF LOCAL:0 == LOCAL:2
				LOCAL:9 = 0
				BREAK
			ENDIF
		NEXT

		;敵都市に隣接していない場合
		IF LOCAL:9
			FOR LOCAL:1, 0, LOCAL:5
				LOCAL:2 = LOCAL:(LOCAL:1 + 100)
				;「敵都市に隣接する都市」に隣接しているかをチェック
				IF IS_ROOT(LOCAL:0, LOCAL:2)
					;敵勢力からの距離が２の都市の番号をLOCAL:200～に順次記録していく
					LOCAL:(LOCAL:6 + 200) = LOCAL:0
					LOCAL:6 ++
					BREAK
				ENDIF
			NEXT
		ENDIF
	ENDIF
NEXT

;敵勢力からの距離が３以上の都市の探索(残りの都市)
LOCAL:7 = 0
FOR LOCAL:0, 0, MAX_CITY
	;ARG:0勢力の都市で、敵部隊と交戦中でない
	IF CITY_OWNER:(LOCAL:0) == ARG:0 && !TMP_IS_STAY_ENEMY_UNIT(LOCAL:0)
		;「敵都市に隣接する都市」として既に記録されているかをチェック
		LOCAL:8 = 1
		FOR LOCAL:1, 0, LOCAL:5
			LOCAL:2 = LOCAL:(LOCAL:1 + 100)
			IF LOCAL:0 == LOCAL:2
				LOCAL:8 = 0
				BREAK
			ENDIF
		NEXT

		IF LOCAL:8
			;「敵都市に隣接する都市」として既に記録されているかをチェック
			LOCAL:9 = 1
			FOR LOCAL:1, 0, LOCAL:6
				LOCAL:2 = LOCAL:(LOCAL:1 + 200)
				IF LOCAL:0 == LOCAL:2
					LOCAL:9 = 0
					BREAK
				ENDIF
			NEXT

			;どちらのリストにも記録されていない場合
			IF LOCAL:9
				;敵勢力からの距離が３以上の都市の番号をLOCAL:300～に順次記録していく
				LOCAL:(LOCAL:7 + 300) = LOCAL:0
				LOCAL:7 ++
			ENDIF
		ENDIF
	ENDIF
NEXT

;敵勢力に隣接する都市に重要度を付ける
LOCAL:10 = 0
FOR LOCAL:0, 0, LOCAL:5
	LOCAL:2 = LOCAL:(LOCAL:0 + 100)
	LOCAL:(LOCAL:0 + 400) = 100
	;占領されたときに増える戦線の数が多いほど重要
	LOCAL:(LOCAL:0 + 400) += MAX(TMP_CHANGE_LINE_ONLOSE(ARG:0, LOCAL:2), -1) * 30
	;勢力全体に占める経済規模の割合が高いほど重要
	LOCAL:(LOCAL:0 + 400) += CITY_ECONOMY:(LOCAL:2) * 100 / GET_SUM_ECONOMY(ARG:0)
	LOCAL:10 += LOCAL:(LOCAL:0 + 400)
NEXT

SELECTCASE CONFIG:300
;簡単
CASE 0
	;残った兵力を防衛に回す
	LOCAL:2 = COUNTRY_SOLDIER:(ARG:0) / (MAX(1, LOCAL:5 + LOCAL:6 + LOCAL:7))

	;どの都市も等分配
	FOR LOCAL:0, 0, LOCAL:5
		LOCAL:1 = LOCAL:(LOCAL:0 + 100)
		CITY_SOLDIER:(LOCAL:1) = LOCAL:2
		COUNTRY_SOLDIER:(ARG:0) -= CITY_SOLDIER:(LOCAL:1)
	NEXT
	FOR LOCAL:0, 0, LOCAL:6
		LOCAL:1 = LOCAL:(LOCAL:0 + 200)
		CITY_SOLDIER:(LOCAL:1) = LOCAL:2
		COUNTRY_SOLDIER:(ARG:0) -= CITY_SOLDIER:(LOCAL:1)
	NEXT
	FOR LOCAL:0, 0, LOCAL:7
		LOCAL:1 = LOCAL:(LOCAL:0 + 300)
		CITY_SOLDIER:(LOCAL:1) = LOCAL:2
		COUNTRY_SOLDIER:(ARG:0) -= CITY_SOLDIER:(LOCAL:1)
	NEXT
	;重要度の高い都市から順に守将を決定
	LOCAL:15 = LOCAL:5
	FOR LOCAL:0, 0, LOCAL:15
		LOCAL:16 = 0
		FOR LOCAL:1, 0, LOCAL:5
			LOCAL:2 = LOCAL:(LOCAL:1 + 400)
			IF LOCAL:2 > LOCAL:16
				LOCAL:16 = LOCAL:2
				LOCAL:17 = LOCAL:1
			ENDIF
		NEXT
		CALL TMP_CREATE_IS_FREE_MAP
		CALL SET_CITY_COMMANDER_BEST(LOCAL:(LOCAL:17 + 100))
		FOR LOCAL:1, LOCAL:17, LOCAL:5
			LOCAL:(LOCAL:1 + 100) = LOCAL:(LOCAL:1 + 101)
			LOCAL:(LOCAL:1 + 400) = LOCAL:(LOCAL:1 + 401)
		NEXT
		LOCAL:5 --
	NEXT
;普通
CASE 1
	;残った兵力を防衛に回す
	LOCAL:2 = COUNTRY_SOLDIER:(ARG:0) / (MAX(1, LOCAL:5 * 2 + LOCAL:6 + LOCAL:7))

	;敵勢力と隣接する都市への割り振り
	FOR LOCAL:0, 0, LOCAL:5
		LOCAL:1 = LOCAL:(LOCAL:0 + 100)
		CITY_SOLDIER:(LOCAL:1) = LOCAL:2 * 2 * LOCAL:(LOCAL:0 + 400) * LOCAL:5 / LOCAL:10
		COUNTRY_SOLDIER:(ARG:0) -= CITY_SOLDIER:(LOCAL:1)
	NEXT

	;敵勢力からの距離が２、３の都市への割り振り
	FOR LOCAL:0, 0, LOCAL:6
		LOCAL:1 = LOCAL:(LOCAL:0 + 200)
		CITY_SOLDIER:(LOCAL:1) = LOCAL:2
		COUNTRY_SOLDIER:(ARG:0) -= CITY_SOLDIER:(LOCAL:1)
	NEXT
	FOR LOCAL:0, 0, LOCAL:7
		LOCAL:1 = LOCAL:(LOCAL:0 + 300)
		CITY_SOLDIER:(LOCAL:1) = LOCAL:2
		COUNTRY_SOLDIER:(ARG:0) -= CITY_SOLDIER:(LOCAL:1)
	NEXT
	;重要度の高い都市から順に守将を決定
	LOCAL:15 = LOCAL:5
	FOR LOCAL:0, 0, LOCAL:15
		LOCAL:16 = 0
		FOR LOCAL:1, 0, LOCAL:5
			LOCAL:2 = LOCAL:(LOCAL:1 + 400)
			IF LOCAL:2 > LOCAL:16
				LOCAL:16 = LOCAL:2
				LOCAL:17 = LOCAL:1
			ENDIF
		NEXT
		CALL TMP_CREATE_IS_FREE_MAP
		;防衛AIは武将の数に余裕があると二人配置する
		IF COUNTRY_AI_TYPE:(ARG:0) == AI_防衛
			IF TMP_GET_IS_FREE_NUM(ARG:0) >= LOCAL:5 + 1
				CALL SET_CITY_COMMANDER_BEST(LOCAL:(LOCAL:17 + 100), 1)
			ELSE
				CALL SET_CITY_COMMANDER_BEST(LOCAL:(LOCAL:17 + 100), 0)
			ENDIF
		ELSE
			CALL SET_CITY_COMMANDER_BEST(LOCAL:(LOCAL:17 + 100), 0)
		ENDIF
		FOR LOCAL:1, LOCAL:17, LOCAL:5
			LOCAL:(LOCAL:1 + 100) = LOCAL:(LOCAL:1 + 101)
			LOCAL:(LOCAL:1 + 400) = LOCAL:(LOCAL:1 + 401)
		NEXT
		LOCAL:5 --
	NEXT

;困難・虐め
CASEELSE
	;距離３以上の都市に各々500の兵を配分
	FOR LOCAL:0, 0, LOCAL:7
		LOCAL:1 = LOCAL:(LOCAL:0 + 300)
		CITY_SOLDIER:(LOCAL:1) = MIN(500, COUNTRY_SOLDIER:(ARG:0))
		COUNTRY_SOLDIER:(ARG:0) -= CITY_SOLDIER:(LOCAL:1)
	NEXT

	;残った兵力を防衛に回す
	LOCAL:2 = COUNTRY_SOLDIER:(ARG:0) / (MAX(1, LOCAL:5 * 5 + LOCAL:6 * 2))

	;敵勢力と隣接する都市への割り振り
	FOR LOCAL:0, 0, LOCAL:5
		LOCAL:1 = LOCAL:(LOCAL:0 + 100)
		CITY_SOLDIER:(LOCAL:1) += LOCAL:2 * 5 * LOCAL:(LOCAL:0 + 400) * LOCAL:5 / LOCAL:10
		COUNTRY_SOLDIER:(ARG:0) -= CITY_SOLDIER:(LOCAL:1)
	NEXT

	;敵勢力からの距離が２の都市への割り振り
	FOR LOCAL:0, 0, LOCAL:6
		LOCAL:1 = LOCAL:(LOCAL:0 + 200)
		CITY_SOLDIER:(LOCAL:1) += LOCAL:2 * 2
		COUNTRY_SOLDIER:(ARG:0) -= CITY_SOLDIER:(LOCAL:1)
	NEXT

	;重要度の高い都市から順に守将を決定
	LOCAL:15 = LOCAL:5
	FOR LOCAL:0, 0, LOCAL:15
		LOCAL:16 = 0
		FOR LOCAL:1, 0, LOCAL:5
			LOCAL:2 = LOCAL:(LOCAL:1 + 400)
			IF LOCAL:2 > LOCAL:16
				LOCAL:16 = LOCAL:2
				LOCAL:17 = LOCAL:1
			ENDIF
		NEXT
		CALL TMP_CREATE_IS_FREE_MAP
		;全てのAIは武将の数に余裕があると二人配置する
		IF TMP_GET_IS_FREE_NUM(ARG:0) >= LOCAL:5 + 1
			CALL SET_CITY_COMMANDER_BEST(LOCAL:(LOCAL:17 + 100), 1)
		ELSE
			CALL SET_CITY_COMMANDER_BEST(LOCAL:(LOCAL:17 + 100), 0)
		ENDIF
		FOR LOCAL:1, LOCAL:17, LOCAL:5
			LOCAL:(LOCAL:1 + 100) = LOCAL:(LOCAL:1 + 101)
			LOCAL:(LOCAL:1 + 400) = LOCAL:(LOCAL:1 + 401)
		NEXT
		LOCAL:5 --
	NEXT
ENDSELECT

;-------------------------------------------------
;CPU勢力の自発的な外交
;戻り値 0=国家関係が変化しなかった 1=国家関係が変化した(何らかの条約を締結)
;-------------------------------------------------
@AI_DIPLOMACY_ACT(ARG:0)
#DIM BOSS_ID, 2
#DIM REL_AI_TYPE, 2
#DIM REL_AI_LIKE, 2
#DIM REL_AI_HATE, 2
#DIM DIPLOMACY_TARGET, MAX_COUNTRY
#DIM DIPLOMACY_TALK, 3

VARSET REL_AI_TYPE, 0
VARSET REL_AI_LIKE, 0
VARSET REL_AI_HATE, 0
VARSET DIPLOMACY_TARGET
VARSET DIPLOMACY_TALK
VARSET BOSS_ID
;外交禁止フラグが立っているなら一切の外交行動を行わない
SIF COUNTRY_IS_CLOSED:(ARG:0)
	RETURN 0

BOSS_ID:0 = GET_COUNTRY_BOSS(ARG:0)
REL_AI_TYPE:0 = COUNTRY_AI_TYPE:(ARG:0)

FOR LOCAL:0, 1, MAX_COUNTRY
	;各国の外交計画をチェック
	SIF IS_COUNTRY(LOCAL:0)
		CALL AI_DIPLOMACY_CHECK(LOCAL:0)
NEXT

;●1.同盟の処理
FOR LOCAL:0, 0, MAX_COUNTRY
	LOCAL:5 = COUNTRY_PROSPECT_A:(ARG:0):(LOCAL:0)
	;★
	IF LOCAL:5 >= 1 && LOCAL:5 != CFLAG:MASTER:1
		FOR LOCAL:1, 0, MAX_COUNTRY
			IF COUNTRY_PROSPECT_A:(LOCAL:5):(LOCAL:1) == ARG:0 && LOCAL:5 != ARG:0

				REL_AI_TYPE:1 = COUNTRY_AI_TYPE:(LOCAL:5)
				;同盟の最低期間
				LOCAL:11 = 5

				;停戦が組まれていれば解消
				FOR LOCAL:2, 0, MAX_TREATY_C
					IF TREATY_C_TERM:(LOCAL:2) > 0
						LOCAL:6 = 0
						FOR LOCAL:3, 0, MAX_TREATY_COUNTRY
							IF TREATY_C_COUNTRY:(LOCAL:2):(LOCAL:3) == ARG:0
								LOCAL:6 |= 0b001
							ELSEIF TREATY_C_COUNTRY:(LOCAL:2):(LOCAL:3) == LOCAL:5
								LOCAL:6 |= 0b010
							ELSEIF TREATY_C_COUNTRY:(LOCAL:2):(LOCAL:3) >= 1
								LOCAL:6 |= 0b100
							ENDIF
						NEXT
						;対象の２勢力間の停戦を削除し、残り期間を記録
						IF LOCAL:6 == 0b011
							LOCAL:11 = MAX(LOCAL:11, TREATY_C_TERM:(LOCAL:2))
							TREATY_C_TERM:(LOCAL:2) = 0
							FOR LOCAL:3, 0, MAX_TREATY_COUNTRY
								TREATY_C_COUNTRY:(LOCAL:2):(LOCAL:3) = 0
							NEXT
						ENDIF
					ENDIF
				NEXT

				FOR LOCAL:2, 0, MAX_TREATY_A
					IF TREATY_A_TERM:(LOCAL:2) <= 0
						;★対象がプレイヤー勢力なら選択肢を表示

						BOSS_ID:1 = GET_COUNTRY_BOSS(LOCAL:5)

						;AI間の補正をかけた好感度、敵対値の算出
						REL_AI_LIKE:0 = REL_LIKE:(BOSS_ID:0):(BOSS_ID:1) * AI_RELATION:(REL_AI_TYPE:0):(REL_AI_TYPE:1) / 100
						REL_AI_LIKE:1 = REL_LIKE:(BOSS_ID:1):(BOSS_ID:0) * AI_RELATION:(REL_AI_TYPE:1):(REL_AI_TYPE:0) / 100
						REL_AI_HATE:0 = REL_HATE:(BOSS_ID:0):(BOSS_ID:1) * 100 / AI_RELATION:(REL_AI_TYPE:0):(REL_AI_TYPE:1)
						REL_AI_HATE:1 = REL_HATE:(BOSS_ID:1):(BOSS_ID:0) * 100 / AI_RELATION:(REL_AI_TYPE:0):(REL_AI_TYPE:1)
						LOCAL:8 = MINARRAY(REL_AI_LIKE)
						LOCAL:9 = MAXARRAY(REL_AI_HATE)

						LOCAL:10 = 5 + RAND:5
						;好感度・敵対値に応じて同盟期間を延長
						SIF LOCAL:8 >= AI_RELATION_BORDER:(REL_AI_TYPE:0):0 && LOCAL:9 < AI_RELATION_BORDER:(REL_AI_TYPE:0):1
							LOCAL:10 += LIMIT(LOCAL:8 / 100 - LOCAL:9 / 200, 1, 10) + RAND:5

						LOCAL:10 = MAX(LOCAL:10, LOCAL:11)
						;同盟締結
						SETCOLOR COLOR("注意")
						PRINTFORML %NAME:(BOSS_ID:0)%と%NAME:(BOSS_ID:1)%は{LOCAL:10}期間の同盟を締結しました
						RESETCOLOR
						IF CFLAG:MASTER:1 >= 1
							WAIT
						ENDIF
						TREATY_A_TERM:(LOCAL:2) = LOCAL:10
						TREATY_A_COUNTRY:(LOCAL:2):0 = ARG:0
						TREATY_A_COUNTRY:(LOCAL:2):1 = LOCAL:5
						RETURN 1
					ENDIF
				NEXT
			ENDIF
		NEXT
	ENDIF
NEXT

;●2.停戦の処理
FOR LOCAL:0, 0, MAX_COUNTRY
	LOCAL:5 = COUNTRY_PROSPECT_C:(ARG:0):(LOCAL:0)
	;★
	IF LOCAL:5 >= 1 && LOCAL:5 != CFLAG:MASTER:1
		FOR LOCAL:1, 0, MAX_COUNTRY
			IF COUNTRY_PROSPECT_C:(LOCAL:5):(LOCAL:1) == ARG:0 && LOCAL:5 != ARG:0
				FOR LOCAL:2, 0, MAX_TREATY_C
					IF TREATY_C_TERM:(LOCAL:2) <= 0

						REL_AI_TYPE:1 = COUNTRY_AI_TYPE:(LOCAL:5)
						;★対象がプレイヤー勢力なら選択肢を表示

						BOSS_ID:0 = GET_COUNTRY_BOSS(ARG:0)
						BOSS_ID:1 = GET_COUNTRY_BOSS(LOCAL:5)

						;AI間の補正をかけた好感度、敵対値の算出
						REL_AI_LIKE:0 = REL_LIKE:(BOSS_ID:0):(BOSS_ID:1) * AI_RELATION:(REL_AI_TYPE:0):(REL_AI_TYPE:1) / 100
						REL_AI_LIKE:1 = REL_LIKE:(BOSS_ID:1):(BOSS_ID:0) * AI_RELATION:(REL_AI_TYPE:1):(REL_AI_TYPE:0) / 100
						REL_AI_HATE:0 = REL_HATE:(BOSS_ID:0):(BOSS_ID:1) * 100 / AI_RELATION:(REL_AI_TYPE:0):(REL_AI_TYPE:1)
						REL_AI_HATE:1 = REL_HATE:(BOSS_ID:1):(BOSS_ID:0) * 100 / AI_RELATION:(REL_AI_TYPE:0):(REL_AI_TYPE:1)
						LOCAL:8 = MINARRAY(REL_AI_LIKE)
						LOCAL:9 = MAXARRAY(REL_AI_HATE)

						LOCAL:10 = 5 + RAND:5
						;好感度・敵対値に応じて同盟期間を延長
						SIF LOCAL:8 >= AI_RELATION_BORDER:(REL_AI_TYPE:0):2 && LOCAL:9 < AI_RELATION_BORDER:(REL_AI_TYPE:0):3
							LOCAL:10 += LIMIT(LOCAL:8 / 100 - LOCAL:9 / 200, 1, 10) + RAND:5

						;停戦条約締結
						SETCOLOR COLOR("注意")
						PRINTFORML %NAME:(BOSS_ID:0)%と%NAME:(BOSS_ID:1)%は{LOCAL:10}期間の停戦条約を締結しました
						RESETCOLOR
						IF CFLAG:MASTER:1 >= 1
							WAIT
						ENDIF
						TREATY_C_TERM:(LOCAL:2) = LOCAL:10
						TREATY_C_COUNTRY:(LOCAL:2):0 = ARG:0
						TREATY_C_COUNTRY:(LOCAL:2):1 = LOCAL:5
						RETURN 1
					ENDIF
				NEXT
			ENDIF
		NEXT
	ENDIF
NEXT

;●3.外交の処理:会談編
;DIPLOMACY_TARGET 勢力ごとのこちらから見た印象度、0に合計値を入れておく
;DIPLOMACY_TALK 0:会談回数を記録, 1:相手を選択するための乱数
FOR LOCAL:0, 0, MAX_COUNTRY
	SIF !IS_COUNTRY(LOCAL:0) || COUNTRY_IS_CLOSED:(ARG:0) || LOCAL:0 == ARG:0 || CFLAG:(MASTER):所属 == LOCAL || LOCAL == GET_COUNTRY_FROM_ID(COUNTRY_BANDIT) || COUNTRY_IS_CLOSED:(LOCAL)
		CONTINUE
	BOSS_ID:1 = GET_COUNTRY_BOSS(LOCAL:0)
	REL_AI_TYPE:1 = COUNTRY_AI_TYPE:(LOCAL:0)
	DIPLOMACY_TARGET:(LOCAL:0) = (REL_LIKE:(BOSS_ID:0):(BOSS_ID:1) * 2 + 2000 - REL_HATE:(BOSS_ID:0):(BOSS_ID:1)) * AI_RELATION:(REL_AI_TYPE:0):(REL_AI_TYPE:1) / 100
NEXT
;DIPLOMACY_TARGET:0 = SUMARRAY(DIPLOMACY_TARGET, 1)
;DEBUGPRINTFORML {DAY,3} 【印象度合計:%NAME:(BOSS_ID:0)%】{DIPLOMACY_TARGET:0}
;会談の実行
IF SUMARRAY(DIPLOMACY_TARGET) == 0
	RETURN 0
ENDIF
DO

	DIPLOMACY_TALK:0 ++
	;会談相手の決定
	DIPLOMACY_TALK:1 = RAND:(SUMARRAY(DIPLOMACY_TARGET, 1))
	;DEBUGPRINTFORML {DAY,3} 【会談判定値:%NAME:(BOSS_ID:0)%】{DIPLOMACY_TALK:1}
	BOSS_ID:1 = -1
	FOR LOCAL:0, 1, MAX_COUNTRY
		IF INRANGE(DIPLOMACY_TALK:1, 1, DIPLOMACY_TARGET:(LOCAL:0))
			BOSS_ID:1 = GET_COUNTRY_BOSS(LOCAL:0)
			DIPLOMACY_TARGET:(LOCAL:0) /= 2
			BREAK
		ELSE
			DIPLOMACY_TALK:1 -= MIN(DIPLOMACY_TARGET:(LOCAL:0), DIPLOMACY_TALK:1)
		ENDIF
	NEXT
	SIF BOSS_ID:1 == -1
		BREAK
	;DEBUGPRINTFORML {DAY,3} 【会談:%NAME:(BOSS_ID:0)%→%NAME:(BOSS_ID:1)%】

	REL_AI_TYPE:1 = COUNTRY_AI_TYPE:(DIPLOMACY_TALK:2)
	;好感度上昇・敵対値下降基準値
	;変動値には相手から見たAI補正をかける
	LOCAL:2 = (30 + RAND:31 + RAND:41) * AI_RELATION:(REL_AI_TYPE:1):(REL_AI_TYPE:0) / 100

	;政治・料理の補正
	;会談を行った側のAI補正をかける
	CALL TMP_CREATE_IS_FREE_MAP
	LOCAL:0 = 5140 + POWER_075(TMP_GET_POLITICS_POWER(ARG:0))
	LOCAL:1 = 5140 + POWER_075(TMP_GET_COOKING_POWER(ARG:0))
	LOCAL:2 = LOCAL:2 * (LOCAL:0 + LOCAL:1) / 10280

	CALL CHANGE_RELATION_C_TO_C(ARG:0, ARG:1, LOCAL:2 , -1 * LOCAL:2)
	PRINTFORML %NAME:(BOSS_ID:0)%が%NAME:(BOSS_ID:1)%と会談を行ったようです

LOOP RAND:(AI_ACTION:(COUNTRY_AI_TYPE:(ARG:0)):2) >= DIPLOMACY_TALK:0

RETURN 0

;-------------------------------------------------
;CPU勢力が外交を行いたい候補をチェックして記録
;プレイヤーが外交を行った際の判定にも利用
;※事前に TMP_CREATE_COUNTRY_NEIBORING_MAP 関数による隣接関係マップの作成が必要
;-------------------------------------------------
@AI_DIPLOMACY_CHECK(ARG:0)
;隣接する勢力のリスト
#DIM LIST_NEIBOR, MAX_COUNTRY
#DIM LIST_MAX
#DIM U_TARGET
#DIM COUNTRY_AI,2, 2

LIST_MAX = 0

VARSET LOCAL, 0
VARSET COUNTRY_AI
FOR LOCAL:0, 0, MAX_COUNTRY
	COUNTRY_PROSPECT_A:(ARG:0):(LOCAL:0) = 0
	COUNTRY_PROSPECT_C:(ARG:0):(LOCAL:0) = 0
	COUNTRY_REQUEST_RATE_A:(ARG:0):(LOCAL:0) = 0
	COUNTRY_REQUEST_RATE_C:(ARG:0):(LOCAL:0) = 0
NEXT

;外交禁止フラグが立っている勢力は一切の外交予定を持たない
SIF COUNTRY_IS_CLOSED:(ARG:0)
	RETURN

;討伐対象勢力を記録(外交を行わない)
U_TARGET = GET_UNION_TARGET(ARG:0)

;隣接する勢力をリストに記録
FOR LOCAL:0, 0, MAX_COUNTRY
	IF IS_COUNTRY(LOCAL:0) && LOCAL:0 != ARG:0
		IF TMP_COUNTRY_IS_NEIBORING:(ARG:0):(LOCAL:0)
			LIST_NEIBOR:(LIST_MAX) = LOCAL:0
			LIST_MAX ++
		ELSEIF LOCAL:0 != U_TARGET
			;隣接していない討伐対象以外の勢力は、同盟・停戦判定を「非隣接による不成立」にする
			COUNTRY_REQUEST_RATE_A:(ARG:0):(LOCAL:0) = 6
			COUNTRY_REQUEST_RATE_C:(ARG:0):(LOCAL:0) = 6
		ENDIF
	ENDIF
NEXT

;●友好的な関係の勢力との同盟・停戦
;隣接する国家に好感度が高く敵対値の低い勢力があれば同盟を模索
COUNTRY_AI:0:0 = GET_COUNTRY_BOSS(ARG:0)
COUNTRY_AI:0:1 = COUNTRY_AI_TYPE:(ARG:0)

FOR LOCAL:0, 1, MAX_COUNTRY
	;連合の討伐対象は除く、あと念のため同一勢力も弾く
	IF IS_COUNTRY(LOCAL:0) && !GROUPMATCH(LOCAL:0, U_TARGET, ARG:0)
		COUNTRY_AI:1:0 = GET_COUNTRY_BOSS(LOCAL:0)
		COUNTRY_AI:1:1 = COUNTRY_AI_TYPE:(LOCAL:0)
		;印象値チェック、相手AIの種類とこちらから見たAI相性、ついでに20%程度のぶれ
		LOCAL:5 = AI_RELATION_BORDER:(COUNTRY_AI:1:1):4 * AI_RELATION:(COUNTRY_AI:0:1):(COUNTRY_AI:1:1) / 100
		LOCAL:5 = REL_LIKE:(COUNTRY_AI:0:0):(COUNTRY_AI:1:0) >= LOCAL:5 * (80 + RAND:11 + RAND:11 + RAND:11 + RAND:11) / 100
		LOCAL:6 = AI_RELATION_BORDER:(COUNTRY_AI:1:1):5 * 100 / AI_RELATION:(COUNTRY_AI:0:1):(COUNTRY_AI:1:1)
		LOCAL:6 = REL_HATE:(COUNTRY_AI:0:0):(COUNTRY_AI:1:0) < LOCAL:5 * (80 + RAND:11 + RAND:11 + RAND:11 + RAND:11) / 100
		IF LOCAL:5 && LOCAL:6
			;隣接している
			IF TMP_COUNTRY_IS_NEIBORING:(ARG:0):(LOCAL:0)
				;同盟・停戦候補に入れる
				CALL MEMORY_PROSPECT_A(ARG:0, LOCAL:0)
				CALL MEMORY_PROSPECT_C(ARG:0, LOCAL:0)
			ENDIF
			;プレイヤーが同盟・停戦を提案した場合、無条件で成立
			COUNTRY_REQUEST_RATE_A:(ARG:0):(LOCAL:0) = 5
			COUNTRY_REQUEST_RATE_C:(ARG:0):(LOCAL:0) = 5
		ENDIF
	ENDIF
NEXT

;現在敵対していない勢力をリストから除く
FOR LOCAL:0, 0, LIST_MAX
	CALL CHECK_COUNTRY_RELATION(ARG:0, LIST_NEIBOR:(LOCAL:0))
	IF RESULT:0 >= 1
		ARRAYREMOVE LIST_NEIBOR, LOCAL:0, 1
		LIST_MAX --
	ENDIF
NEXT

;２ヶ国以上と隣接
IF LIST_MAX >= 2
	;隣接国間で経済規模を比較する
	LOCAL:6 = GET_SUM_ECONOMY(ARG:0)
	LOCAL:110 = LOCAL:6
	LOCAL:210 = ARG:0
	FOR LOCAL:0, 0, LIST_MAX
		LOCAL:7 = GET_SUM_ECONOMY(LIST_NEIBOR:(LOCAL:0))
		FOR LOCAL:1, 0, LOCAL:0 + 2
			IF LOCAL:1 == LOCAL:0 + 1 || LOCAL:7 < LOCAL:(LOCAL:0 - LOCAL:1 + 110)
				LOCAL:(LOCAL:0 - LOCAL:1 + 111) = LOCAL:7
				LOCAL:(LOCAL:0 - LOCAL:1 + 211) = LIST_NEIBOR:(LOCAL:0)
				BREAK
			ELSE
				LOCAL:(LOCAL:0 - LOCAL:1 + 111) = LOCAL:(LOCAL:0 - LOCAL:1 + 110)
				LOCAL:(LOCAL:0 - LOCAL:1 + 211) = LOCAL:(LOCAL:0 - LOCAL:1 + 210)
			ENDIF
		NEXT
	NEXT

	;隣国間で自国が最大の経済規模を持つ場合
	IF LOCAL:210 == ARG:0
		;周辺国の経済規模を合計
		LOCAL:8 = SUMARRAY(LOCAL, 111, 110 + LIST_MAX)
		;自国の経済規模が周辺国の合計の3倍より小さい場合(圧倒的な優位を築けていない場合)
		SELECTCASE LOCAL:110
		CASE IS < LOCAL:8 * 4
			;経済規模の大きい順に停戦候補を決定
			FOR LOCAL:0, 0, LIST_MAX
				LOCAL:10 = LOCAL:(LOCAL:0 + 111)
				LOCAL:11 = LOCAL:(LOCAL:0 + 211)
				;連合の討伐対象は除く
				IF LOCAL:11 != U_TARGET
					
					;経済規模の比率で分岐
					LOCAL:5 = AI_RELATION_BORDER:(COUNTRY_AI:1:1):5 * AI_RELATION:(COUNTRY_AI:0:1):(COUNTRY_AI:1:1) / 100
					SELECTCASE LOCAL:110 / LOCAL:10
					CASE IS > LOCAL:5
						;プレイヤーが停戦を提案した場合、中度の要求をされる(同盟は不可)
						COUNTRY_REQUEST_RATE_C:(ARG:0):(LOCAL:11) = 3
					CASE IS > LOCAL:5 / 2
						;停戦候補に入れる
						CALL MEMORY_PROSPECT_C(ARG:0, LOCAL:11)
						;プレイヤーが停戦を提案した場合、軽度の要求をされる(同盟は不可)
						COUNTRY_REQUEST_RATE_C:(ARG:0):(LOCAL:11) = 2
					CASEELSE
						;停戦候補に入れる
						CALL MEMORY_PROSPECT_C(ARG:0, LOCAL:11)
						;プレイヤーが停戦を提案した場合、軽度の要求をされる(同盟は不可)
						COUNTRY_REQUEST_RATE_C:(ARG:0):(LOCAL:11) = 2
					ENDSELECT
				ENDIF
			NEXT
		;圧倒的優位の場合
		CASEELSE
			;経済規模の大きい順に停戦候補を決定
			FOR LOCAL:0, 0, LIST_MAX
				LOCAL:10 = LOCAL:(LOCAL:0 + 111)
				LOCAL:11 = LOCAL:(LOCAL:0 + 211)
				;連合の討伐対象は除く
				IF LOCAL:11 != U_TARGET
					;プレイヤーが停戦を提案した場合、重度の要求をされる(同盟は不可)
					COUNTRY_REQUEST_RATE_C:(ARG:0):(LOCAL:11) = 4
				ENDIF
			NEXT
		ENDSELECT

	;隣国間で自国の経済規模が最大でない場合
	ELSE
		;経済規模が最大の国家を除き、経済規模が大きい順に同盟・停戦を模索
		FOR LOCAL:0, 0, LIST_MAX
			LOCAL:10 = LOCAL:(LOCAL:0 + 111)
			LOCAL:11 = LOCAL:(LOCAL:0 + 211)
			;連合の討伐対象、経済規模が最大の勢力は除く
			IF LOCAL:11 != U_TARGET && LOCAL:11 != ARG:0

				COUNTRY_AI:1:0 = GET_COUNTRY_BOSS(LOCAL:11)
				COUNTRY_AI:1:1 = COUNTRY_AI_TYPE:(LOCAL:11)
				;印象値チェック、相手AIの種類とこちらから見たAI相性、ついでに20%程度のぶれ
				LOCAL:5 = AI_RELATION_BORDER:(COUNTRY_AI:1:1):7 * AI_RELATION:(COUNTRY_AI:0:1):(COUNTRY_AI:1:1) / 100
				LOCAL:5 = REL_LIKE:(COUNTRY_AI:0:0):(COUNTRY_AI:1:0) >= LOCAL:5 * (80 + RAND:11 + RAND:11 + RAND:11 + RAND:11) / 100
				LOCAL:6 = AI_RELATION_BORDER:(COUNTRY_AI:1:1):8 * 100 / AI_RELATION:(COUNTRY_AI:0:1):(COUNTRY_AI:1:1)
				LOCAL:6 = REL_HATE:(COUNTRY_AI:0:0):(COUNTRY_AI:1:0) < LOCAL:5 * (80 + RAND:11 + RAND:11 + RAND:11 + RAND:11) / 100

					;相手君主への好感度が高いか、敵対値が低めの場合(関係が悪くない)
					IF LOCAL:5 || LOCAL:6
						;同盟・停戦候補に入れる
						CALL MEMORY_PROSPECT_A(ARG:0, LOCAL:11)
						CALL MEMORY_PROSPECT_C(ARG:0, LOCAL:11)
						;プレイヤーが同盟・停戦を提案した場合、無条件で成立
						COUNTRY_REQUEST_RATE_A:(ARG:0):(LOCAL:11) = 1
						COUNTRY_REQUEST_RATE_C:(ARG:0):(LOCAL:11) = 1
					;相手君主への好感度が低く敵対値が高い場合(関係が悪い)
					ELSE
						;停戦候補に入れる(同盟はしない)
						CALL MEMORY_PROSPECT_C(ARG:0, LOCAL:11)
						;プレイヤーが停戦を提案した場合、軽度の要求をされる(同盟は不可)
						COUNTRY_REQUEST_RATE_C:(ARG:0):(LOCAL:11) = 2
					ENDIF
			ENDIF
		NEXT
		;経済規模が最大国家の1/3未満なら最大国家との同盟・停戦も模索
		IF LOCAL:210 != U_TARGET && LOCAL:6 * 3 < LOCAL:110
			COUNTRY_AI:1:0 = GET_COUNTRY_BOSS(LOCAL:11)
			COUNTRY_AI:1:1 = COUNTRY_AI_TYPE:(LOCAL:11)
			;印象値チェック、相手AIの種類とこちらから見たAI相性、ついでに20%程度のぶれ
			LOCAL:5 = AI_RELATION_BORDER:(COUNTRY_AI:1:1):7 * AI_RELATION:(COUNTRY_AI:0:1):(COUNTRY_AI:1:1) / 100
			LOCAL:5 = REL_LIKE:(COUNTRY_AI:0:0):(COUNTRY_AI:1:0) >= LOCAL:5 * (80 + RAND:11 + RAND:11 + RAND:11 + RAND:11) / 100
			LOCAL:6 = AI_RELATION_BORDER:(COUNTRY_AI:1:1):8 * 100 / AI_RELATION:(COUNTRY_AI:0:1):(COUNTRY_AI:1:1)
			LOCAL:6 = REL_HATE:(COUNTRY_AI:0:0):(COUNTRY_AI:1:0) < LOCAL:5 * (80 + RAND:11 + RAND:11 + RAND:11 + RAND:11) / 100

			;相手君主への好感度が高いか、敵対値が低めの場合(関係が悪くない)
			IF LOCAL:5 || LOCAL:6
				;同盟・停戦候補に入れる
				CALL MEMORY_PROSPECT_A(ARG:0, LOCAL:210)
				CALL MEMORY_PROSPECT_C(ARG:0, LOCAL:210)
				;プレイヤーが同盟・停戦を提案した場合、無条件で成立
				COUNTRY_REQUEST_RATE_A:(ARG:0):(LOCAL:210) = 1
				COUNTRY_REQUEST_RATE_C:(ARG:0):(LOCAL:210) = 1
			;相手君主への好感度が低く敵対値が高い場合(関係が悪い)
			ELSE
				;プレイヤーが停戦を提案した場合、中度の要求をされる(同盟は不可)
				COUNTRY_REQUEST_RATE_C:(ARG:0):(LOCAL:210) = 3
			ENDIF
		ENDIF
	ENDIF
ENDIF

;-------------------------------------------------
;同盟候補の勢力を記録する関数(ARG:0=対象勢力、ARG:1=同盟候補の勢力)
;-------------------------------------------------
@MEMORY_PROSPECT_A(ARG:0, ARG:1)
CALL CHECK_COUNTRY_RELATION(ARG:0, ARG:1)
;既に同盟以上の関係ならスキップ
IF RESULT:0 < 3
	;既にリストに乗っていれば戻る
	FOR LOCAL:0, 0, 20
		IF COUNTRY_PROSPECT_A:(ARG:0):(LOCAL:0) == ARG:1
			RETURN
		ENDIF
	NEXT
	FOR LOCAL:0, 0, 20
		IF COUNTRY_PROSPECT_A:(ARG:0):(LOCAL:0) == 0
			COUNTRY_PROSPECT_A:(ARG:0):(LOCAL:0) = ARG:1
			;★
			;PRINTFORML %NAME:GET_COUNTRY_BOSS(ARG:0)%:同盟候補=%NAME:GET_COUNTRY_BOSS(ARG:1)%
			BREAK
		ENDIF
	NEXT
ENDIF

;-------------------------------------------------
;停戦候補の勢力を記録する関数(ARG:0=対象勢力、ARG:1=停戦候補の勢力)
;-------------------------------------------------
@MEMORY_PROSPECT_C(ARG:0, ARG:1)
CALL CHECK_COUNTRY_RELATION(ARG:0, ARG:1)
;既に停戦以上の関係ならスキップ
IF RESULT:0 < 1
	;既にリストに乗っていれば戻る
	FOR LOCAL:0, 0, 20
		IF COUNTRY_PROSPECT_C:(ARG:0):(LOCAL:0) == ARG:1
			RETURN
		ENDIF
	NEXT
	FOR LOCAL:0, 0, 20
		IF COUNTRY_PROSPECT_C:(ARG:0):(LOCAL:0) == 0
			COUNTRY_PROSPECT_C:(ARG:0):(LOCAL:0) = ARG:1
			;★
			;PRINTFORML %NAME:GET_COUNTRY_BOSS(ARG:0)%:停戦候補=%NAME:GET_COUNTRY_BOSS(ARG:1)%
			BREAK
		ENDIF
	NEXT
ENDIF

;-------------------------------------------------
;作成可能な部隊のうち能力が最強となる将の組み合わせを調べる ARG:0=勢力番号
;※直前に @TMP_CREATE_IS_FREE_MAP 関数を呼び出してから使用すること
;-------------------------------------------------
@CHECK_COMMANDER_BEST(ARG:0)
;候補キャラのキャラ番号及びそのキャラの各パワーを記録する配列
;一次配列でそれぞれ用意しているのは配列検索系の関数を利用するため
#DIM CHECK_IS_FREE, 1000
#DIM FREE_STR, 1000
#DIM FREE_INT, 1000
#DIM FREE_MAG, 1000
#DIM FREE_POL, 1000
#DIM FREE_AI_PRIORITY, 3
;候補キャラのパワー上昇率と政治パワー合計
#DIM FREE_PUP, 1000
#DIM SUM_POL

VARSET CHECK_IS_FREE, -1
VARSET UNIT_COMMANDER_BEST, -1
VARSET LOCAL, -1
VARSET FREE_STR, -1
VARSET FREE_INT, -1
VARSET FREE_MAG, -1
VARSET FREE_POL, -1
VARSET FREE_PUP, -1
VARSET FREE_AI_PRIORITY, 10

LOCAL:1 = 0
FOR LOCAL:0, 0, MIN(CHARANUM, 1000)
	;自国の士官のみ考慮
	IF CFLAG:(LOCAL:0):1 == ARG:0 && TMP_IS_FREE:(LOCAL:0):0 == 0
		;自由に行動可能なキャラ番号をCHECK_IS_FREEに順番に格納
		CHECK_IS_FREE:(LOCAL:1) = LOCAL:0
		LOCAL:1 ++
	ENDIF
NEXT

SUM_POL = 0


FOR LOCAL:0, 0, LOCAL:1
	;別変数に一旦格納
	LOCAL:2 = CHECK_IS_FREE:(LOCAL:0)
	FREE_STR:(LOCAL:0) = ABL_POWER_X(ABL:(LOCAL:2):武闘, LOCAL:2)
	FREE_INT:(LOCAL:0) = ABL_POWER_X(ABL:(LOCAL:2):知略, LOCAL:2)
	FREE_MAG:(LOCAL:0) = ABL_POWER_X(ABL:(LOCAL:2):妖術, LOCAL:2)
	FREE_POL:(LOCAL:0) = ABL_POWER_X(ABL:(LOCAL:2):政治, LOCAL:2)

	SUM_POL += FREE_POL:(LOCAL:0)
NEXT


FOR LOCAL:0, 0, LOCAL:1
	;行動可能なキャラの政治パワー合計のうち一定割合を占めているキャラを除外
	IF FREE_POL:(LOCAL:0) > AI_POLITICAL_LIMIT:(COUNTRY_AI_TYPE:(ARG:0)) * SUM_POL / 100
		FREE_STR:(LOCAL:0) = 0
		FREE_INT:(LOCAL:0) = 0
		FREE_MAG:(LOCAL:0) = 0
		FREE_POL:(LOCAL:0) = -1
	ENDIF
NEXT

;武闘・知略・妖術の最大値を比較し最も大きい値を持つキャラを候補にする
LOCAL:10 = MAXARRAY(FREE_STR)
LOCAL:20 = MAXARRAY(FREE_INT)
LOCAL:30 = MAXARRAY(FREE_MAG)

;重視率のゆらぎ80～120%
FREE_AI_PRIORITY:0 = AI_PRIORITY:(COUNTRY_AI_TYPE:(ARG:0)):0 * (80 + RAND:41) / 100
FREE_AI_PRIORITY:1 = AI_PRIORITY:(COUNTRY_AI_TYPE:(ARG:0)):1 * (80 + RAND:41) / 100
FREE_AI_PRIORITY:2 = AI_PRIORITY:(COUNTRY_AI_TYPE:(ARG:0)):2 * (80 + RAND:41) / 100

SIF ALLSAMES(LOCAL:10, LOCAL:20, LOCAL:30) && LOCAL:10 == -1
	RETURN 1
;AI毎に各パワーに重みをもたせて重視する能力を変化させている
;FREE_XXX及びCHECK_IS_FREEの配列は要素の位置が同じなら同じキャラのデータをとるのを利用
IF LOCAL:10 * FREE_AI_PRIORITY:0 >= LOCAL:20 * FREE_AI_PRIORITY:1
	IF LOCAL:10 * FREE_AI_PRIORITY:0 >= LOCAL:30 * FREE_AI_PRIORITY:2
		LOCAL:50 = FINDELEMENT(FREE_STR, LOCAL:10)
	ELSE
		LOCAL:50 = FINDELEMENT(FREE_MAG, LOCAL:30)
	ENDIF
ELSE
	LOCAL:50 = FINDELEMENT(FREE_INT, LOCAL:20)
ENDIF

UNIT_COMMANDER_BEST:0 = CHECK_IS_FREE:(LOCAL:50)

IF UNIT_COMMANDER_BEST:0 >= 0
	;１人目のキャラを候補から外す（政治パワーにフラグをつける）
	FREE_POL:(LOCAL:50) = -1

	;アップ率の合計が最も大きいキャラを次の候補にする
	LOCAL:40 = 0
	LOCAL:41 = -1
	FOR LOCAL:0, 0, LOCAL:1
		;候補に残っているキャラのみを考慮
		SIF FREE_POL:(LOCAL:0) < 0 || LOCAL:50 == LOCAL:0
			CONTINUE
		LOCAL:12 = MAX(FREE_STR:(LOCAL:0) - ABL_50_POWER, 0) * 1000 * FREE_AI_PRIORITY:0 / FREE_STR:(LOCAL:50)
		LOCAL:22 = MAX(FREE_INT:(LOCAL:0) - ABL_50_POWER, 0) * 1000 * FREE_AI_PRIORITY:1 / FREE_INT:(LOCAL:50)
		LOCAL:32 = MAX(FREE_MAG:(LOCAL:0) - ABL_50_POWER, 0) * 1000 * FREE_AI_PRIORITY:2 / FREE_MAG:(LOCAL:50)
		FREE_PUP:(LOCAL:0) = LOCAL:12 + LOCAL:22 + LOCAL:32
	NEXT
	LOCAL:51 = FINDELEMENT(FREE_PUP,  MAX(MAXARRAY(FREE_PUP), 0))
	;２人目のキャラを記録し候補から外す
	UNIT_COMMANDER_BEST:1 = LOCAL:51 >= 0 ? CHECK_IS_FREE:(LOCAL:51) # -1

	IF UNIT_COMMANDER_BEST:1 >= 0
		FREE_POL:(LOCAL:51) = -1

		LOCAL:13 = FREE_STR:(LOCAL:50) + FREE_STR:(LOCAL:51)
		LOCAL:23 = FREE_INT:(LOCAL:50) + FREE_INT:(LOCAL:51)
		LOCAL:33 = FREE_MAG:(LOCAL:50) + FREE_MAG:(LOCAL:51)
	ENDIF

	VARSET FREE_PUP, -1

	;アップ率の合計が最も大きいキャラを次の候補にする(３人目は歌唱・料理も考慮、[現代兵術]持ちは優先)
	LOCAL:8 = 0
	IF (LOCAL:50 < 0 || !TALENT:(CHECK_IS_FREE:(LOCAL:50)):現代兵術) && (LOCAL:51 < 0 || !TALENT:(CHECK_IS_FREE:(LOCAL:51)):現代兵術)
		LOCAL:8 = 1
	ENDIF
	FOR LOCAL:0, 0, LOCAL:1
		;候補に残っているキャラのみを考慮
		SIF FREE_POL:(LOCAL:0) < 0 || GROUPMATCH(LOCAL:0, LOCAL:50, LOCAL:51)
			CONTINUE
		LOCAL:2 = CHECK_IS_FREE:(LOCAL:0)
		LOCAL:12 = MAX(FREE_STR:(LOCAL:0) - ABL_50_POWER, 0) * 1000 / LOCAL:13 * FREE_AI_PRIORITY:0
		LOCAL:22 = MAX(FREE_INT:(LOCAL:0) - ABL_50_POWER, 0) * 1000 / LOCAL:23 * FREE_AI_PRIORITY:1
		LOCAL:32 = MAX(FREE_MAG:(LOCAL:0) - ABL_50_POWER, 0) * 1000 / LOCAL:33 * FREE_AI_PRIORITY:2
		LOCAL:42 = (MAX(ABL_POWER_X(ABL:(LOCAL:2):歌唱, LOCAL:2) - ABL_50_POWER, 0) + 24000) / 24 - 1000
		LOCAL:52 = (MAX(ABL_POWER_X(ABL:(LOCAL:2):料理, LOCAL:2) - ABL_50_POWER, 0) + 24000) / 24 - 1000
		FREE_PUP:(LOCAL:0) = LOCAL:12 + LOCAL:22 + LOCAL:32 + LOCAL:42 + LOCAL:52
		
		IF TALENT:(CHECK_IS_FREE:(LOCAL:0)):現代兵術 && LOCAL:8
			FREE_PUP:(LOCAL:0) = __INT_MAX__
			BREAK
		ENDIF
	NEXT
	LOCAL:52 = FINDELEMENT(FREE_PUP, MAX(MAXARRAY(FREE_PUP), 0))

	;３人目のキャラを記録
	UNIT_COMMANDER_BEST:2 = LOCAL:52 >= 0 ? CHECK_IS_FREE:(LOCAL:52) # -1

	IF UNIT_COMMANDER_BEST:1 < 0 && UNIT_COMMANDER_BEST:2 >= 0
		UNIT_COMMANDER_BEST:1 = UNIT_COMMANDER_BEST:2
		UNIT_COMMANDER_BEST:2 = -1
	ENDIF
ELSE
;	DEBUGPRINTFORML {DAY, 3}【編成武将候補なし】:%NAME:(GET_COUNTRY_BOSS(ARG:0))%
	
ENDIF

;SIF !NOSAMES(LOCAL:50, LOCAL:51, LOCAL:52)
;	DEBUGPRINTFORML {DAY, 3}【武将重複？】:%NAME:(GET_COUNTRY_BOSS(ARG:0))%@ {LOCAL:50}:{CHECK_IS_FREE:(LOCAL:50)}, {LOCAL:51}:{CHECK_IS_FREE:(LOCAL:51)}, {LOCAL:52}:{CHECK_IS_FREE:(LOCAL:52)}

;最後にNO順に並べ替える
FOR LOCAL:0, 0, 3
	IF UNIT_COMMANDER_BEST:(LOCAL:0) >= 0
		FOR LOCAL:1, LOCAL:0 + 1, 3
			IF UNIT_COMMANDER_BEST:(LOCAL:1) >= 0
				IF NO:(UNIT_COMMANDER_BEST:(LOCAL:0)) > NO:(UNIT_COMMANDER_BEST:(LOCAL:1))
					SWAP UNIT_COMMANDER_BEST:(LOCAL:0), UNIT_COMMANDER_BEST:(LOCAL:1)
				ENDIF
			ENDIF
		NEXT
	ENDIF
NEXT

;-------------------------------------------------
;部隊に配置する将の組み合わせ候補のリストを作成 ARG:0=勢力番号 ARG:1=作成する部隊の数
;※直前に @TMP_CREATE_IS_FREE_MAP 関数を呼び出してから使用すること
;-------------------------------------------------
@CREATE_COMMANDER_LIST(ARG:0, ARG:1)
;キャラが候補として残っているかどうかを記録する変数
#DIM CHECK_IS_FREE, 1000

VARSET CHECK_IS_FREE, 0

FOR LOCAL:0, 0, 10
	FOR LOCAL:1, 0, 3
		UNIT_COMMANDER_LIST:(LOCAL:0):(LOCAL:1) = -1
	NEXT
NEXT

FOR LOCAL:0, 0, MIN(CHARANUM, 1000)
	;自国の士官のみ考慮
	IF CFLAG:(LOCAL:0):1 == ARG:0
		;自由に行動可能なら候補フラグを立てる
		CHECK_IS_FREE:(LOCAL:0) = (TMP_IS_FREE:(LOCAL:0):0 == 0)
	ENDIF
NEXT

FOR LOCAL:1, 0, ARG:1
	LOCAL:10 = ABL_50_POWER
	LOCAL:20 = ABL_50_POWER
	LOCAL:30 = 0
	LOCAL:11 = -1
	LOCAL:21 = -1
	LOCAL:31 = -1
	FOR LOCAL:0, 0, MIN(CHARANUM, 1000)
		;候補に残っているキャラのみを考慮
		IF CHECK_IS_FREE:(LOCAL:0)
			LOCAL:12 = ABL_POWER_X(ABL:(LOCAL:0):武闘, LOCAL:0)
			LOCAL:22 = ABL_POWER_X(ABL:(LOCAL:0):知略, LOCAL:0)
			LOCAL:32 = ABL_POWER_X(ABL:(LOCAL:0):妖術, LOCAL:0)
			;武闘パワーが最大のキャラとその値を取得
			IF LOCAL:12 > LOCAL:10
				LOCAL:10 = LOCAL:12
				LOCAL:11 = LOCAL:0
			ENDIF
			;知略パワーが最大のキャラとその値を取得
			IF LOCAL:22 > LOCAL:20
				LOCAL:20 = LOCAL:22
				LOCAL:21 = LOCAL:0
			ENDIF
			;妖術パワーが最大のキャラとその値を取得
			IF LOCAL:32 > LOCAL:30
				LOCAL:30 = LOCAL:32
				LOCAL:31 = LOCAL:0
			ENDIF
		ENDIF
	NEXT

	;武闘最大値と知略最大値を比較し大きい方を持つキャラを１人目にする
	IF LOCAL:10 >= LOCAL:20
		IF LOCAL:10 >= LOCAL:30
			UNIT_COMMANDER_LIST:(LOCAL:1):0 = LOCAL:11
		ELSE
			UNIT_COMMANDER_LIST:(LOCAL:1):0 = LOCAL:31
		ENDIF
	ELSE
		UNIT_COMMANDER_LIST:(LOCAL:1):0 = LOCAL:21
	ENDIF

	IF UNIT_COMMANDER_LIST:(LOCAL:1):0 >= 0
		;選んだキャラを候補から外す
		CHECK_IS_FREE:(UNIT_COMMANDER_LIST:(LOCAL:1):0) = 0
	ENDIF
NEXT

FOR LOCAL:2, 1, 3
	FOR LOCAL:1, 0, ARG:1
		;アップ率の合計が最も大きいキャラを２・３人目の候補にする(歌唱・料理も考慮)
		LOCAL:80 = 0
		LOCAL:81 = -1
		LOCAL:5 = UNIT_COMMANDER_LIST:(LOCAL:1):(LOCAL:2 - 1)
		LOCAL:6 = UNIT_COMMANDER_LIST:(LOCAL:1):0
		LOCAL:7 = UNIT_COMMANDER_LIST:(LOCAL:1):1
		LOCAL:8 = 0
		IF (LOCAL:6 < 0 || !TALENT:(LOCAL:6):現代兵術) && (LOCAL:7 < 0 || !TALENT:(LOCAL:7):現代兵術)
			LOCAL:8 = 1
		ENDIF

		IF LOCAL:5 >= 0
			LOCAL:13 = ABL_POWER_X(ABL:(LOCAL:5):武闘, LOCAL:5)
			LOCAL:23 = ABL_POWER_X(ABL:(LOCAL:5):知略, LOCAL:5)
			LOCAL:33 = ABL_POWER_X(ABL:(LOCAL:5):妖術, LOCAL:5)
			FOR LOCAL:0, 0, MIN(CHARANUM, 1000)
				;候補に残っているキャラのみを考慮
				IF CHECK_IS_FREE:(LOCAL:0)
					LOCAL:12 = MAX(ABL_POWER_X(ABL:(LOCAL:0):武闘, LOCAL:0) - ABL_50_POWER, 0) * 1000 / LOCAL:13
					LOCAL:22 = MAX(ABL_POWER_X(ABL:(LOCAL:0):知略, LOCAL:0) - ABL_50_POWER, 0) * 1000 / LOCAL:23
					LOCAL:32 = MAX(ABL_POWER_X(ABL:(LOCAL:0):妖術, LOCAL:0) - ABL_50_POWER, 0) * 1000 / LOCAL:33
					LOCAL:42 = (MAX(ABL_POWER_X(ABL:(LOCAL:0):歌唱, LOCAL:0) - ABL_50_POWER, 0) + 24000) / 24 - 1000
					LOCAL:52 = (MAX(ABL_POWER_X(ABL:(LOCAL:0):料理, LOCAL:0) - ABL_50_POWER, 0) + 24000) / 24 - 1000
					LOCAL:82 = LOCAL:12 + LOCAL:22 + LOCAL:32 + LOCAL:42 + LOCAL:52
					;部隊能力の上昇率が最大のキャラとその値を取得
					IF LOCAL:82 > LOCAL:80
						LOCAL:80 = LOCAL:82
						LOCAL:81 = LOCAL:0
					ENDIF
					IF TALENT:(LOCAL:0):現代兵術 && LOCAL:8
						LOCAL:81 = LOCAL:0
						BREAK
					ENDIF
				ENDIF
			NEXT

			UNIT_COMMANDER_LIST:(LOCAL:1):(LOCAL:2) = LOCAL:81

			IF UNIT_COMMANDER_LIST:(LOCAL:1):(LOCAL:2) >= 0
				;選んだキャラを候補から外す
				CHECK_IS_FREE:(UNIT_COMMANDER_LIST:(LOCAL:1):(LOCAL:2)) = 0
			ENDIF
		ENDIF
	NEXT
NEXT

;最後にNO順に並べ替える
FOR LOCAL:2, 0, 10
	FOR LOCAL:0, 0, 3
		IF UNIT_COMMANDER_LIST:(LOCAL:2):(LOCAL:0) >= 0
			FOR LOCAL:1, LOCAL:0 + 1, 3
				IF UNIT_COMMANDER_LIST:(LOCAL:2):(LOCAL:1) >= 0
					IF NO:(UNIT_COMMANDER_LIST:(LOCAL:2):(LOCAL:0)) > NO:(UNIT_COMMANDER_LIST:(LOCAL:2):(LOCAL:1))
						SWAP UNIT_COMMANDER_LIST:(LOCAL:2):(LOCAL:0), UNIT_COMMANDER_LIST:(LOCAL:2):(LOCAL:1)
					ENDIF
				ENDIF
			NEXT
		ENDIF
	NEXT
NEXT

;-------------------------------------------------
;都市ARG:0に最適な守将を配置。ARG:1を1にすると二人設定できる。
;※直前に @TMP_CREATE_IS_FREE_MAP 関数を呼び出してから使用すること
;-------------------------------------------------
@SET_CITY_COMMANDER_BEST(ARG:0, ARG:1 = 0)
#DIM 勢力
#DIM LCOUNT,2
#DIM 最大
VARSET LOCAL, __INT_MIN__
;都市を所有する勢力の番号を取得
勢力 = CITY_OWNER:(ARG:0)

;勢力に所属してFREEな各キャラの能力を記録
FOR LCOUNT, 0, CHARANUM
	IF CFLAG:(LCOUNT):所属 == 勢力 && TMP_IS_FREE:(LCOUNT):0 == 0
		;知略の重みは武闘・妖術の1/8
		LOCAL:(LCOUNT) = MAX(ABL_POWER_X(ABL:(LCOUNT):武闘, LCOUNT) - ABL_50_POWER, 0) + MAX(ABL_POWER_X(MIN(ABL:(LCOUNT):知略, 110), LCOUNT) - ABL_50_POWER, 0) / 8 + MAX(ABL_POWER_X(ABL:(LCOUNT):妖術, LCOUNT) - ABL_50_POWER, 0)
	ENDIF
NEXT

;二人設定フラグが真なら2度回す
FOR LCOUNT:0, 0, 1 + (ARG:1 == 1)
	;LOCAL（記録した各キャラの能力）から、最大のものを探索
	最大 = MAXARRAY(LOCAL, 0)
	;最大のものが__INT_MIN__でなければ（その都市を所属している勢力に、IS_FREEなキャラが残っていれば）、そいつを登録
	IF 最大 != __INT_MIN__
		FOR LCOUNT:1, 0, CHARANUM
			IF LOCAL:(LCOUNT:1) == 最大
				CALL SET_CITY_COMMANDER(ARG:0, LCOUNT:0, LCOUNT:1)
				LOCAL:(LCOUNT:1) = __INT_MIN__
				BREAK
			ENDIF
		NEXT
	ENDIF
NEXT